{
    "Conceito do Site": "Um tutorial moderno sobre JavaScript, contemplando tudo que é feito atualmente, do básico ao avançado, com explicações simples, mas detalhadas.",
    "Introdução":{
        "O que é JavaScript": [
            "O JavaScript foi criado inicialmente para 'tornar as páginas da web vivas'.",
            "Os programas nesse idioma são chamados de scripts.",
            "Eles podem ser escritos diretamente no HTML de uma página da web e executados automaticamente conforme a página é carregada.",
            "Os scripts são fornecidos e executados como texto sem formatação.",
            "Eles não precisam de preparação ou compilação especial para serem executados.",
            "Nesse aspecto, o JavaScript é muito diferente de outra linguagem chamada Java.",
            "Hoje, o JavaScript pode ser executado não apenas no navegador, mas também no servidor ou em qualquer dispositivo que possua um programa especial chamado 'JavaScript Engine' (Mecanismo Javascript).",
            "O navegador possui um mecanismo incorporado às vezes chamado de 'máquina virtual JavaScript'.",
            "Mecanismos diferentes têm nomes de códigos diferentes: V8 - no Chrome e Opera; SpiderMonkey - no Firefox; ... Existem outros codinomes como 'Trident' e 'Chakra' para diferentes versões do IE, 'ChakraCore' para Microsoft Edge, 'Nitro' e 'SquirrelFish' para Safari, etc.",
            {
                "Por que é chamado JavaScript?":[
                    "Quando o JavaScript foi criado, ele inicialmente tinha outro nome: “LiveScript”.",
                    "Mas o Java era muito popular na época, então foi decidido que o posicionamento de uma nova linguagem como um 'irmão mais novo' do Java ajudaria.",
                    "Mas, à medida que evoluía, o JavaScript se tornou uma linguagem totalmente independente, com sua própria especificação chamada ECMAScript, e agora não tem nenhuma relação com Java."
                ],
                "Como funcionam os motores?":[
                    "Motores são complicados. Mas o básico é fácil.",
                    "O mecanismo (incorporado se for um navegador) lê ('analisa') o script.",
                    "Em seguida, ele converte (“compila”) o script para a linguagem de máquina.",
                    "E então o código da máquina é executado, bem rápido.",
                    "O mecanismo aplica otimizações em cada etapa do processo.",
                    "Ele assiste o script compilado enquanto é executado, analisa os dados que fluem por ele e otimiza ainda mais o código da máquina com base nesse conhecimento."
                ]
            }
        ],
        "O que o JS pode fazer no Browser?":[
            "O JavaScript moderno é uma linguagem de programação 'segura'.",
            "Ele não fornece acesso de baixo nível à memória ou à CPU, porque foi criado inicialmente para navegadores que não precisam dele.",
            "Os recursos do JavaScript dependem muito do ambiente em que ele está sendo executado - por exemplo, o Node.js suporta funções que permitem ao JavaScript ler e/ou gravar arquivos arbitrários, executar solicitações de rede etc.",
            "O JavaScript no navegador pode fazer tudo relacionado à manipulação de páginas da web, interação com o usuário e o servidor da web.",
            {
                "Exemplos de Capacidades":[
                    "Adicione novo HTML à página, altere o conteúdo existente, modifique estilos.",
                    "Reaja às ações do usuário, execute cliques do mouse, movimentos do ponteiro, pressionamento de teclas.",
                    "Envie solicitações pela rede para servidores remotos, faça o download e faça upload de arquivos (as chamadas tecnologias AJAX e COMET ).",
                    "Obtenha e defina cookies, faça perguntas ao visitante, mostre mensagens.",
                    "Lembre-se dos dados no lado do cliente ('armazenamento local')."
                ]
            }
        ],
        "O que o JS NÃO pode fazer no Navegador?":[
            "As habilidades do JavaScript no navegador são limitadas por questões de segurança do usuário.",
            "O objetivo é impedir que uma página da web ruim acesse informações privadas ou prejudique os dados do usuário.",
            {
                "Restrições":[
                    "O JavaScript em uma página da web não pode ler / gravar arquivos arbitrários no disco rígido, copiá-los ou executar programas.",
                    "Não possui acesso direto às funções do SO.",
                    "Navegadores modernos permitem que ele trabalhe com arquivos, mas o acesso é limitado e fornecido apenas se o usuário executar determinadas ações, como 'soltar' um arquivo na janela do navegador ou selecioná-lo por meio de uma tag <input>.",
                    "Existem maneiras de interagir com a câmera / microfone e outros dispositivos, mas eles exigem permissão explícita do usuário.",
                    "Uma página habilitada para JavaScript não pode abilitar sorrateiramente uma câmera da web, observar os arredores e enviar as informações à National Security Agency (NSA).",
                    "Abas (janelas) diferentes geralmente não se conhecem - isso é chamado de 'mesma política de origem' (CORS) - para contornar isso, as duas páginas devem concordar com a troca de dados e conter um código JavaScript especial que lide com isso.",
                    "Toda essa limitação é, novamente, para a segurança do usuário - uma página da http://anysite.com na qual um usuário abriu não deve ser capaz de acessar outra guia do navegador com a URL http://gmail.com e roubar informações a partir daí.",
                    "O JavaScript pode se comunicar facilmente pela rede com o servidor de onde veio a página atual, mas sua capacidade de receber dados de outros sites / domínios está prejudicad - rmbora possível, exige um acordo explícito (expresso em cabeçalhos HTTP) do lado remoto, isso é uma limitação de segurança.",
                    "Esses limites não existem se o JavaScript for usado fora do navegador, por exemplo, em um servidor.",
                    "Navegadores modernos também permitem extensões / plug-ins que podem solicitar permissões estendidas."
                ]
            }
        ],
        "O que torna o JavaScript único?":[
            "Há pelo menos três grandes coisas sobre JavaScript: integração total com HTML / CSS; coisas simples são feitas simplesmente; suportado por todos os principais navegadores e ativado por padrão.",
            "JavaScript é a única tecnologia de navegador que combina essas três coisas.",
            "É isso que torna o JavaScript único. É por isso que é a ferramenta mais difundida para criar interfaces de navegador.",
            "O JavaScript também permite criar servidores, aplicativos móveis, etc."
        ],
        "Supersets de Javascript":[
            "A sintaxe do JavaScript não se adequa às necessidades de todos, pessoas diferentes querem características diferentes.",
            "Recentemente, apareceu uma infinidade de novos idiomas, que são transpilados (convertidos) para JavaScript antes de serem executados no navegador.",
            "As ferramentas modernas tornam a transpilação muito rápida e transparente, permitindo que os desenvolvedores codifiquem em outro idioma e a convertam automaticamente 'sob o capô'.",
            {
                "Exemplos de Supersets":{
                    "CoffeeScript": "É um 'açúcar sintático' para JavaScript, ele introduz uma sintaxe mais curta, permitindo escrever código mais claro e preciso.",
                    "TypeScript": "Está concentrado na adição de 'tipificação estrita de dados' para simplificar o desenvolvimento e o suporte de sistemas complexos, é desenvolvido pela Microsoft.",
                    "Flow ": "Também adiciona a tipificação de dados, mas de uma maneira diferente, é desenvolvido pelo Facebook.",
                    "Dart": "É uma linguagem autônoma que possui seu próprio mecanismo que roda em ambientes que não são do navegador (como aplicativos móveis), mas também pode ser transpilada para JavaScript, desenvolvido pelo Google."
                }
            }
        ],
        "Resumo":[
            "O JavaScript foi criado inicialmente como um idioma somente para navegador, mas agora também é usado em muitos outros ambientes.",
            "Hoje, o JavaScript tem uma posição única como a linguagem de navegador mais amplamente adotada, com total integração com HTML / CSS.",
            "Existem muitos idiomas que são 'transpilados' para JavaScript e fornecem certos recursos - é recomendável dar uma olhada neles, pelo menos brevemente, depois de dominar o JavaScript."
        ]
    },
    "Manuais e especificações":{
        "Especificação":[
            "A especificação ECMA-262 contém as informações mais detalhadas, detalhadas e formalizadas sobre JavaScript. Ele define o idioma.",
            "Mas sendo formalizado, é difícil entender a princípio. Portanto, se você precisar da fonte mais confiável de informações sobre os detalhes do idioma, a especificação é o lugar certo. Mas não é para uso diário.",
            "Uma nova versão de especificação é lançada todos os anos - entre essas versões, o rascunho de especificação mais recente está em https://tc39.es/ecma262/.",
            "Para ler sobre os novos recursos avançados, incluindo aqueles 'quase padrão' (chamado 'estágio 3'), consulte as propostas em https://github.com/tc39/proposals."
        ],
        "Manuais":[
            "A Referência JavaScript MDN (Mozilla) é um manual com exemplos e outras informações.",
            "É ótimo obter informações detalhadas sobre funções individuais de idiomas, métodos etc.",
            "Pode-se encontrá-lo em https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference .",
            "Embora, geralmente, é melhor usar uma pesquisa na Internet, basta usar 'MDN [term]' na consulta, por exemplo, https://google.com/search?q=MDN+parseInt para procurar a função parseInt.",
            "MSDN - Manual da Microsoft com muitas informações, incluindo JavaScript (geralmente conhecido como JScript) - se alguém precisar de algo específico para o Internet Explorer, é melhor ir para lá: http://msdn.microsoft.com/."
        ],
        "Compatibilidade":[
            "JavaScript é uma linguagem em desenvolvimento, novos recursos são adicionados regularmente.",
            {
                "Suporte nas Engines":[
                    "http://caniuse.com - tabelas de suporte por recurso.",
                    "http://caniuse.com/#feat=cryptography - para ver quais mecanismos suportam funções modernas de criptografia.",
                    "https://kangax.github.io/compat-table - uma tabela com recursos e mecanismos de idioma que os suportam ou não."
                ]
            },
            "Todos esses recursos são úteis no desenvolvimento da vida real, pois contêm informações valiosas sobre detalhes do idioma, seu suporte etc."
        ]
    },
    "Console do Desenvolvedor":[
        "O código é propenso a erros. Você provavelmente cometerá erros ... Oh, do que estou falando? Você absolutamente cometerá erros, pelo menos se for humano, não um robô .",
        "Mas no navegador, os usuários não veem erros por padrão - portanto, se algo der errado no script, não veremos o que está quebrado e não podemos corrigi-lo.",
        "Para ver erros e obter muitas outras informações úteis sobre scripts, 'ferramentas de desenvolvedor' foram incorporadas nos navegadores.",
        "A maioria dos desenvolvedores se inclina para o Chrome ou Firefox para desenvolvimento porque esses navegadores têm as melhores ferramentas de desenvolvedor.",
        "Outros navegadores também fornecem ferramentas para desenvolvedores, às vezes com recursos especiais, mas geralmente estão reproduzindo atualizações do Chrome ou Firefox.",
        "A maioria dos desenvolvedores tem um navegador 'favorito' e muda para outros se um problema for específico do navegador.",
        "As ferramentas de desenvolvedor nos permitem ver erros, executar comandos, examinar variáveis ​​e muito mais.",
        "Eles podem ser abertos com a tecla de atalho F12 para a maioria dos navegadores no Windows - necessidades do Chrome para Mac , Safari: (é necessário ativar primeiro). Cmd+Opt+JCmd+Opt+C"
    ],
    "Fundamentos":{
        "Introdução" : {
            "A tag script": "Os programas JavaScript podem ser inseridos em qualquer parte de um documento HTML com a ajuda da <script>tag.",
            "Marcação Moderno":[
                "A <script>tag possui alguns atributos que raramente são usados ​​hoje em dia, mas ainda podem ser encontrados em código antigos.",
                {
                    "O atributo type":[
                        "O antigo padrão HTML, HTML4, exigia um script para ter um type. Geralmente era type='text/javascript'.",
                        "Atualmente, não é mais necessário o tyoe, além disso, o moderno padrão HTML mudou totalmente o significado desse atributo. Agora, ele pode ser usado para módulos JavaScript."
                    ],
                    "O atributo language" :[
                        "Este atributo foi criado para mostrar o idioma do script.",
                        "Esse atributo não faz mais sentido porque o JavaScript é o idioma padrão. Não há necessidade de usá-lo."
                    ]
                },
                "Em livros e guias realmente antigos, você pode encontrar comentários dentro de tags <script>.",
                "Esse truque não é usado no JavaScript moderno. Esses comentários ocultam o código JavaScript de navegadores antigos que não sabiam processar a tag <script>.",
                "Como os navegadores lançados nos últimos 15 anos não têm esse problema, esse tipo de comentário pode ajudá-lo a identificar códigos realmente antigos."
            ],
            "Scripts Externos": [
                "Uma única tag <script> não pode conter o atributo src e o código.",
                "Se tivermos muito código JavaScript, podemos colocá-lo em um arquivo separado.",
                "Os arquivos de script são anexados ao HTML com o atributo src: <script src='/path/to/script.js'></script>",
                "/path/to/script.js está um caminho absoluto para o script a partir da raiz do site.",
                "Pode-se também fornecer um caminho relativo a partir da página atual - pr exemplo, src='script.js' significaria um arquivo 'script.js' na pasta atual.",
                {
                    "Observações":[
                        "Como regra, apenas os scripts mais simples são colocados em HTML. Os mais complexos residem em arquivos separados.",
                        "A vantagem de um arquivo separado é que o navegador fará o download e o armazenará em seu cache.",
                        "Outras páginas que referenciam o mesmo script o tiram do cache em vez de baixá-lo, portanto, o arquivo é baixado apenas uma vez.",
                        "Isso reduz o tráfego e torna as páginas mais rápidas."
                    ]
                }
            ],
            "Resumo":[
                "Podemos usar uma <script>tag para adicionar código JavaScript a uma página.",
                "Os atributos type e language não são necessários.",
                "Um script em um arquivo externo pode ser inserido com <script src='path/to/script.js'></script>."
            ]
        },
        "Estrutura de Código":{
            "Afirmações":[
                "Instruções são construções de sintaxe e comandos que executam ações.",
                "Podemos ter quantas instruções em nosso código quisermos",
                "As instruções podem ser separadas com um ponto e vírgula.",
                "Geralmente, as instruções são escritas em linhas separadas para tornar o código mais legível."
            ],
            "Ponto e Vírgula":[
                "Um ponto e vírgula pode ser omitido na maioria dos casos quando existe uma quebra de linha.",
                "O JavaScript interpreta a quebra de linha como um ponto e vírgula 'implícito', isso é chamado de inserção automática de ponto e vírgula.",
                "Na maioria dos casos, uma nova linha implica um ponto e vírgula, porém 'na maioria dos casos' não significa 'sempre', em expressões incompletas a inserção automática não ocorre.",
                "Há situações em que o JavaScript “falha” em assumir um ponto-e-vírgula onde é realmente necessário, os erros que ocorrem nesses casos são bastante difíceis de encontrar e corrigir.",
                "Exemplo de falha do JS para assumir ponto e virgula pode ser analisado através do script: | alert('There will be an error') [1, 2].forEach(alert) | - o erro na variante sem ponto e vírgula ocorre porque o JavaScript não assume ponto e vírgula antes de colchetes [...].",
                "No exemplo anterior, como o ponto e vírgula não é inserido automaticamente, o código no primeiro exemplo é tratado como uma única instrução. Veja como o mecanismo o vê: alert('There will be an error')[1, 2].forEach(alert)",
                "Recomendamos colocar ponto e vírgula entre as instruções, mesmo que sejam separadas por novas linhas.",
                "Esta regra é amplamente adotada pela comunidade. Vamos observar mais uma vez - é possível deixar ponto e vírgula a maior parte do tempo.",
                "É mais seguro - especialmente para iniciantes - usá-los."
            ],
            "Comentários":[
                "Com o passar do tempo, os programas se tornam cada vez mais complexos, torna-se necessário adicionar comentários que descrevam o que o código faz e por quê.",
                "Os comentários podem ser colocados em qualquer lugar do script, eles não afetam sua execução porque o mecanismo simplesmente os ignora.",
                "Os comentários de uma linha começam com dois caracteres de barra '//', o restante da linha é um comentário, podendo ocupar uma linha completa própria ou seguir uma declaração.",
                "Os comentários de várias linhas começam com uma barra e um asterisco /*e terminam com um asterisco e uma barra */.",
                "Comentários aninhados não são suportados, um comentário de várias linhas /*...*/ não pode existir dentro de outro /*...*/.",
                "Os comentários aumentam a área de cobertura geral do código, mas isso não é um problema.",
                "Existem muitas ferramentas que minimizam o código antes de publicar em um servidor de produção.",
                "Estas ferramentas removem comentários, para que não apareçam nos scripts de trabalho.",
                "Os comentários não têm efeitos negativos sobre a produção."
            ]
        },
        "Uso Estrito":[
            "Durante muito tempo, o JavaScript evoluiu sem problemas de compatibilidade.",
            "Novos recursos foram adicionados ao idioma, enquanto a funcionalidade antiga não foi alterada.",
            "Isso teve o benefício de nunca quebrar o código existente, mas a desvantagem foi que qualquer erro ou decisão imperfeita dos criadores do JavaScript ficou para sempre na linguagem.",
            "Esse foi o caso até 2009, quando o ECMAScript 5 (ES5) apareceu, ele adicionou novos recursos ao idioma e modificou alguns dos existentes.",
            "Para manter o código antigo funcionando, a maioria das modificações do ES5 está desativada por padrão, você precisa ativá-los explicitamente com uma diretiva especial: 'use strict'.",
            "A diretiva se parece com uma string: \"use strict\"ou 'use strict', e quando está localizado na parte superior de um script, o script inteiro funciona da maneira 'moderna'.",
            "Não existe uma diretiva como 'no use strict', que reverteria o mecanismo para o comportamento antigo, quando entramos no modo estrito, não há como voltar atrás.",
            "O JavaScript moderno suporta 'classes' e 'módulos' - estruturas de linguagem avançadas, que são ativam o uso estrito automaticamente, ou seja, não precisamos adicionar a 'use strict' diretiva, se os usarmos."
        ],
        "Variáveis":{
            "Introdução":[
                "Uma variável é um 'armazenamento nomeado' para dados.",
                "Para criar uma variável em JavaScript, use a palavra - chave 'let' ou 'const'.",
                "A declaração a seguir cria (em outras palavras: declara ) uma variável com o nome 'mensagem': let message - em scripts mais antigos, você também pode encontrar outra palavra-chave: 'var' em vez de 'let'.",
                "A palavra-chave 'var' é quase a mesma que let, ele também declara uma variável, mas de uma maneira um pouco diferente da “velha escola”, tendo diferença em seu escopo, var têm escopo global, enquanto let e const possuêm escopo local."
            ],
            "Analogia da Vida Real":[
                "Podemos entender facilmente o conceito de uma 'variável' se o imaginarmos como uma 'caixa' de dados, com um adesivo com um nome exclusivo.",
                "A variável mensagem pode ser imaginada como uma caixa rotulada 'mensagem' com o valor 'Hello!' nela (conteúdo dentro da caixa).",
                "Podemos colocar qualquer valor (conteúdo) na caixa, e também podemos alterá-lo quantas vezes quisermos.",
                "Quando o valor é alterado, os dados antigos são removidos da variável",
                "Também podemos declarar duas variáveis ​​e copiar dados de uma para a outra.",
                {
                    "Linguagens Funcionais":[
                        "É interessante notar que existem linguagens de programação funcionais , como Scala ou Erlang, que proíbem a alteração de valores de variáveis.",
                        "Nesses idiomas, uma vez que o valor é armazenado 'na caixa', ele fica lá para sempre.",
                        "Se precisarmos armazenar outra coisa, o idioma nos obriga a criar uma nova caixa (declarar uma nova variável), de modo que não podemos reutilizar o antigo.",
                        "Embora possa parecer um pouco estranho à primeira vista, essas linguagens são bastante capazes de desenvolvimento sério.",
                        "Mais do que isso, existem áreas como cálculos paralelos em que essa limitação confere certos benefícios.",
                        "Estudar esses idiomas (mesmo que você não pretenda usá-lo em breve) é recomendado para ampliar a mente."
                    ]
                }
            ],
            "Nomenclatura":{
                "Limitações":[
                    "O nome deve conter apenas letras, dígitos ou os símbolos $ e _.",
                    "O primeiro caractere não deve ser um dígito.",
                    "Quando o nome contém várias palavras, o camelCase é comumente usado.",
                    "O cifrão '$' e o sublinhado '_'também podem ser usados ​​nos nomes, são símbolos regulares, assim como letras, sem nenhum significado especial."
                ],
                "Alertas Importantes": [
                    "Variáveis ​​nomeadas 'apple' e 'AppLE' são duas variáveis ​​diferentes.",
                    "Letras não latinas são permitidas, mas não recomendadas - é possível usar qualquer idioma, incluindo letras cirílicas ou mesmo hieróglifos: let имя = '...'; let 我 = '...';",
                    "Tecnicamente, não há erro, letras latinas são permitidas, mas existe uma tradição internacional para usar o inglês em nomes de variáveis, mesmo se estivermos escrevendo um pequeno script, ele pode ter uma vida longa pela frente, pessoas de outros países podem precisar ler algum tempo.",
                    "Há uma lista de palavras reservadas , que não podem ser usadas como nomes de variáveis ​​porque são usadas pelo próprio idioma - por exemplo: let, class, return, e function são reservados.",
                    "Normalmente, precisamos definir uma variável antes de usá-la. Porém, antigamente, era tecnicamente possível criar uma variável mediante uma mera atribuição do valor sem o uso let. Isso ainda funciona agora se não colocarmos 'use strict' em nossos scripts para manter a compatibilidade com scripts antigos."
                ],
                "Constantes":[
                    "Para declarar uma variável constante (imutável), use em 'const' vez de 'let'",
                    "Variáveis ​​declaradas usando 'const' são chamadas de 'constantes', elas não podem ser reatribuídos, de modo que uma tentativa de fazer isso causaria um erro.",
                    "Quando um programador tem certeza de que uma variável nunca será alterada, pode declara-la 'const' para garantir e comunicar claramente esse fato a todos.",
                    "Existe uma prática generalizada de usar constantes como aliases para valores difíceis de lembrar que são conhecidos antes da execução - essas constantes são nomeadas usando letras maiúsculas e sublinhados.",
                    "As constantes nomeadas em maiúsculas são usadas apenas como aliases para valores 'codificados'.",
                    "Geralmente usamos letras maiúsculas para constantes que são 'codificadas, em outras palavras, quando o valor é conhecido antes da execução e diretamente escrito no código.",
                    {
                        "Exemplos de Constante em Maiúscula":[
                            "A variável: const BIRTHDAY = '18.04.1982' ... birthday é conhecido antes da execução, podemos usar maiúsculas para isso.",
                            "A variável: const age = someCode(BIRTHDAY) ... é avaliado em tempo de execução, hoje temos uma idade, um ano depois de outra, é constante, no sentido de que não muda através da execução do código - mas é um pouco 'menos constante' do que birthday, portanto devemos manter a letra minúscula."
                        ]
                    }
                ],
                "Nomenclaturas Corretas":[
                    "Um nome de variável deve ter um significado claro e óbvio, descrevendo os dados que ela armazena.",
                    "A nomeação de uma variável é uma das habilidades mais importantes e complexas da programação.",
                    "Uma rápida olhada nos nomes das variáveis ​​pode revelar qual código foi escrito por um iniciante versus um desenvolvedor experiente.",
                    "Em um projeto real, a maior parte do tempo é gasta modificando e estendendo uma base de código existente, em vez de escrever algo completamente separado do zero.",
                    "Quando voltamos a algum código depois de fazer outra coisa por um tempo, é muito mais fácil encontrar informações bem rotuladas, em outras palavras, quando as variáveis ​​têm bons nomes.",
                    "Dedique algum tempo a pensar no nome certo para uma variável antes de declará-la. Isso o recompensará generosamente.",
                    {
                        "Boas Práticas":[
                            "Use nomes legíveis por humanos como userName ou shoppingCart.",
                            "Fique longe de abreviaturas ou nomes curtos como a, b, c, a menos que você realmente saiba o que está fazendo.",
                            "Faça nomes maximamente descritivos e concisos - exemplos de nomes ruins são data e value. Tais nomes não dizem nada, mas não há problema em usá-los se o contexto do código tornar excepcionalmente óbvio quais dados ou valores a variável está fazendo referência.",
                            "Concorde com os termos da sua equipe e em sua própria mente - se um visitante do site é chamado de 'usuário', devemos nomear variáveis ​​relacionadas currentUser ou em newUser em vez de currentVisitor ou newManInTown."
                        ],
                        "Reutilização de Variáveis":[
                            "Existem alguns programadores preguiçosos que, em vez de declarar novas variáveis, tendem a reutilizar as existentes.",
                            "Como resultado, suas variáveis ​​são como caixas nas quais as pessoas jogam coisas diferentes sem alterar seus adesivos.",
                            "O que há dentro da caixa agora? Quem sabe? Precisamos nos aproximar e conferir, em suma, uma variável extra é boa, não má.",
                            "Esses programadores economizam um pouco na declaração de variáveis, mas perdem dez vezes mais na depuração.",
                            "Navegadores e minificadores de JavaScript modernos otimizam o código suficientemente bem, para que não crie problemas de desempenho",
                            "O uso de variáveis ​​diferentes para valores diferentes pode até ajudar o mecanismo a otimizar seu código."
                        ]
                    }
                ],
                "Resumo":[
                    "Podemos declarar variáveis para armazenar dados usando as palavras-chave: 'var', 'let' ou 'const'.",
                    "let - é uma declaração de variável moderna.",
                    "var - é uma declaração variável da velha escola - normalmente, não o usamos.",
                    "const- é como let, mas o valor da variável não pode ser alterado.",
                    "As variáveis ​​devem ser nomeadas de uma maneira que permita entender facilmente o que há dentro delas."
                ]
            }
        }
    }
    
    
}   