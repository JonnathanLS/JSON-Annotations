{
    "Conceito do Site": "Um tutorial moderno sobre JavaScript, contemplando tudo que é feito atualmente, do básico ao avançado, com explicações simples, mas detalhadas.",
    "Introdução":{
        "O que é JavaScript": [
            "O JavaScript foi criado inicialmente para 'tornar as páginas da web vivas'.",
            "Os programas nesse idioma são chamados de scripts.",
            "Eles podem ser escritos diretamente no HTML de uma página da web e executados automaticamente conforme a página é carregada.",
            "Os scripts são fornecidos e executados como texto sem formatação.",
            "Eles não precisam de preparação ou compilação especial para serem executados.",
            "Nesse aspecto, o JavaScript é muito diferente de outra linguagem chamada Java.",
            "Hoje, o JavaScript pode ser executado não apenas no navegador, mas também no servidor ou em qualquer dispositivo que possua um programa especial chamado 'JavaScript Engine' (Mecanismo Javascript).",
            "O navegador possui um mecanismo incorporado às vezes chamado de 'máquina virtual JavaScript'.",
            "Mecanismos diferentes têm nomes de códigos diferentes: V8 - no Chrome e Opera; SpiderMonkey - no Firefox; ... Existem outros codinomes como 'Trident' e 'Chakra' para diferentes versões do IE, 'ChakraCore' para Microsoft Edge, 'Nitro' e 'SquirrelFish' para Safari, etc.",
            {
                "Por que é chamado JavaScript?":[
                    "Quando o JavaScript foi criado, ele inicialmente tinha outro nome: “LiveScript”.",
                    "Mas o Java era muito popular na época, então foi decidido que o posicionamento de uma nova linguagem como um 'irmão mais novo' do Java ajudaria.",
                    "Mas, à medida que evoluía, o JavaScript se tornou uma linguagem totalmente independente, com sua própria especificação chamada ECMAScript, e agora não tem nenhuma relação com Java."
                ],
                "Como funcionam os motores?":[
                    "Motores são complicados. Mas o básico é fácil.",
                    "O mecanismo (incorporado se for um navegador) lê ('analisa') o script.",
                    "Em seguida, ele converte (“compila”) o script para a linguagem de máquina.",
                    "E então o código da máquina é executado, bem rápido.",
                    "O mecanismo aplica otimizações em cada etapa do processo.",
                    "Ele assiste o script compilado enquanto é executado, analisa os dados que fluem por ele e otimiza ainda mais o código da máquina com base nesse conhecimento."
                ]
            }
        ],
        "O que o JS pode fazer no Browser?":[
            "O JavaScript moderno é uma linguagem de programação 'segura'.",
            "Ele não fornece acesso de baixo nível à memória ou à CPU, porque foi criado inicialmente para navegadores que não precisam dele.",
            "Os recursos do JavaScript dependem muito do ambiente em que ele está sendo executado - por exemplo, o Node.js suporta funções que permitem ao JavaScript ler e/ou gravar arquivos arbitrários, executar solicitações de rede etc.",
            "O JavaScript no navegador pode fazer tudo relacionado à manipulação de páginas da web, interação com o usuário e o servidor da web.",
            {
                "Exemplos de Capacidades":[
                    "Adicione novo HTML à página, altere o conteúdo existente, modifique estilos.",
                    "Reaja às ações do usuário, execute cliques do mouse, movimentos do ponteiro, pressionamento de teclas.",
                    "Envie solicitações pela rede para servidores remotos, faça o download e faça upload de arquivos (as chamadas tecnologias AJAX e COMET ).",
                    "Obtenha e defina cookies, faça perguntas ao visitante, mostre mensagens.",
                    "Lembre-se dos dados no lado do cliente ('armazenamento local')."
                ]
            }
        ],
        "O que o JS NÃO pode fazer no Navegador?":[
            "As habilidades do JavaScript no navegador são limitadas por questões de segurança do usuário.",
            "O objetivo é impedir que uma página da web ruim acesse informações privadas ou prejudique os dados do usuário.",
            {
                "Restrições":[
                    "O JavaScript em uma página da web não pode ler / gravar arquivos arbitrários no disco rígido, copiá-los ou executar programas.",
                    "Não possui acesso direto às funções do SO.",
                    "Navegadores modernos permitem que ele trabalhe com arquivos, mas o acesso é limitado e fornecido apenas se o usuário executar determinadas ações, como 'soltar' um arquivo na janela do navegador ou selecioná-lo por meio de uma tag <input>.",
                    "Existem maneiras de interagir com a câmera / microfone e outros dispositivos, mas eles exigem permissão explícita do usuário.",
                    "Uma página habilitada para JavaScript não pode abilitar sorrateiramente uma câmera da web, observar os arredores e enviar as informações à National Security Agency (NSA).",
                    "Abas (janelas) diferentes geralmente não se conhecem - isso é chamado de 'mesma política de origem' (CORS) - para contornar isso, as duas páginas devem concordar com a troca de dados e conter um código JavaScript especial que lide com isso.",
                    "Toda essa limitação é, novamente, para a segurança do usuário - uma página da http://anysite.com na qual um usuário abriu não deve ser capaz de acessar outra guia do navegador com a URL http://gmail.com e roubar informações a partir daí.",
                    "O JavaScript pode se comunicar facilmente pela rede com o servidor de onde veio a página atual, mas sua capacidade de receber dados de outros sites / domínios está prejudicad - rmbora possível, exige um acordo explícito (expresso em cabeçalhos HTTP) do lado remoto, isso é uma limitação de segurança.",
                    "Esses limites não existem se o JavaScript for usado fora do navegador, por exemplo, em um servidor.",
                    "Navegadores modernos também permitem extensões / plug-ins que podem solicitar permissões estendidas."
                ]
            }
        ],
        "O que torna o JavaScript único?":[
            "Há pelo menos três grandes coisas sobre JavaScript: integração total com HTML / CSS; coisas simples são feitas simplesmente; suportado por todos os principais navegadores e ativado por padrão.",
            "JavaScript é a única tecnologia de navegador que combina essas três coisas.",
            "É isso que torna o JavaScript único. É por isso que é a ferramenta mais difundida para criar interfaces de navegador.",
            "O JavaScript também permite criar servidores, aplicativos móveis, etc."
        ],
        "Supersets de Javascript":[
            "A sintaxe do JavaScript não se adequa às necessidades de todos, pessoas diferentes querem características diferentes.",
            "Recentemente, apareceu uma infinidade de novos idiomas, que são transpilados (convertidos) para JavaScript antes de serem executados no navegador.",
            "As ferramentas modernas tornam a transpilação muito rápida e transparente, permitindo que os desenvolvedores codifiquem em outro idioma e a convertam automaticamente 'sob o capô'.",
            {
                "Exemplos de Supersets":{
                    "CoffeeScript": "É um 'açúcar sintático' para JavaScript, ele introduz uma sintaxe mais curta, permitindo escrever código mais claro e preciso.",
                    "TypeScript": "Está concentrado na adição de 'tipificação estrita de dados' para simplificar o desenvolvimento e o suporte de sistemas complexos, é desenvolvido pela Microsoft.",
                    "Flow ": "Também adiciona a tipificação de dados, mas de uma maneira diferente, é desenvolvido pelo Facebook.",
                    "Dart": "É uma linguagem autônoma que possui seu próprio mecanismo que roda em ambientes que não são do navegador (como aplicativos móveis), mas também pode ser transpilada para JavaScript, desenvolvido pelo Google."
                }
            }
        ],
        "Resumo":[
            "O JavaScript foi criado inicialmente como um idioma somente para navegador, mas agora também é usado em muitos outros ambientes.",
            "Hoje, o JavaScript tem uma posição única como a linguagem de navegador mais amplamente adotada, com total integração com HTML / CSS.",
            "Existem muitos idiomas que são 'transpilados' para JavaScript e fornecem certos recursos - é recomendável dar uma olhada neles, pelo menos brevemente, depois de dominar o JavaScript."
        ]
    },
    "Manuais e especificações":{
        "Especificação":[
            "A especificação ECMA-262 contém as informações mais detalhadas, detalhadas e formalizadas sobre JavaScript. Ele define o idioma.",
            "Mas sendo formalizado, é difícil entender a princípio. Portanto, se você precisar da fonte mais confiável de informações sobre os detalhes do idioma, a especificação é o lugar certo. Mas não é para uso diário.",
            "Uma nova versão de especificação é lançada todos os anos - entre essas versões, o rascunho de especificação mais recente está em https://tc39.es/ecma262/.",
            "Para ler sobre os novos recursos avançados, incluindo aqueles 'quase padrão' (chamado 'estágio 3'), consulte as propostas em https://github.com/tc39/proposals."
        ],
        "Manuais":[
            "A Referência JavaScript MDN (Mozilla) é um manual com exemplos e outras informações.",
            "É ótimo obter informações detalhadas sobre funções individuais de idiomas, métodos etc.",
            "Pode-se encontrá-lo em https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference .",
            "Embora, geralmente, é melhor usar uma pesquisa na Internet, basta usar 'MDN [term]' na consulta, por exemplo, https://google.com/search?q=MDN+parseInt para procurar a função parseInt.",
            "MSDN - Manual da Microsoft com muitas informações, incluindo JavaScript (geralmente conhecido como JScript) - se alguém precisar de algo específico para o Internet Explorer, é melhor ir para lá: http://msdn.microsoft.com/."
        ],
        "Compatibilidade":[
            "JavaScript é uma linguagem em desenvolvimento, novos recursos são adicionados regularmente.",
            {
                "Suporte nas Engines":[
                    "http://caniuse.com - tabelas de suporte por recurso.",
                    "http://caniuse.com/#feat=cryptography - para ver quais mecanismos suportam funções modernas de criptografia.",
                    "https://kangax.github.io/compat-table - uma tabela com recursos e mecanismos de idioma que os suportam ou não."
                ]
            },
            "Todos esses recursos são úteis no desenvolvimento da vida real, pois contêm informações valiosas sobre detalhes do idioma, seu suporte etc."
        ]
    },
    "Console do Desenvolvedor":[
        "O código é propenso a erros. Você provavelmente cometerá erros ... Oh, do que estou falando? Você absolutamente cometerá erros, pelo menos se for humano, não um robô .",
        "Mas no navegador, os usuários não veem erros por padrão - portanto, se algo der errado no script, não veremos o que está quebrado e não podemos corrigi-lo.",
        "Para ver erros e obter muitas outras informações úteis sobre scripts, 'ferramentas de desenvolvedor' foram incorporadas nos navegadores.",
        "A maioria dos desenvolvedores se inclina para o Chrome ou Firefox para desenvolvimento porque esses navegadores têm as melhores ferramentas de desenvolvedor.",
        "Outros navegadores também fornecem ferramentas para desenvolvedores, às vezes com recursos especiais, mas geralmente estão reproduzindo atualizações do Chrome ou Firefox.",
        "A maioria dos desenvolvedores tem um navegador 'favorito' e muda para outros se um problema for específico do navegador.",
        "As ferramentas de desenvolvedor nos permitem ver erros, executar comandos, examinar variáveis ​​e muito mais.",
        "Eles podem ser abertos com a tecla de atalho F12 para a maioria dos navegadores no Windows - necessidades do Chrome para Mac , Safari: (é necessário ativar primeiro). Cmd+Opt+JCmd+Opt+C"
    ],
    "Fundamentos":{
        "Introdução" : {
            "A tag script": "Os programas JavaScript podem ser inseridos em qualquer parte de um documento HTML com a ajuda da <script>tag.",
            "Marcação Moderno":[
                "A <script>tag possui alguns atributos que raramente são usados ​​hoje em dia, mas ainda podem ser encontrados em código antigos.",
                {
                    "O atributo type":[
                        "O antigo padrão HTML, HTML4, exigia um script para ter um type. Geralmente era type='text/javascript'.",
                        "Atualmente, não é mais necessário o tyoe, além disso, o moderno padrão HTML mudou totalmente o significado desse atributo. Agora, ele pode ser usado para módulos JavaScript."
                    ],
                    "O atributo language" :[
                        "Este atributo foi criado para mostrar o idioma do script.",
                        "Esse atributo não faz mais sentido porque o JavaScript é o idioma padrão. Não há necessidade de usá-lo."
                    ]
                },
                "Em livros e guias realmente antigos, você pode encontrar comentários dentro de tags <script>.",
                "Esse truque não é usado no JavaScript moderno. Esses comentários ocultam o código JavaScript de navegadores antigos que não sabiam processar a tag <script>.",
                "Como os navegadores lançados nos últimos 15 anos não têm esse problema, esse tipo de comentário pode ajudá-lo a identificar códigos realmente antigos."
            ],
            "Scripts Externos": [
                "Uma única tag <script> não pode conter o atributo src e o código.",
                "Se tivermos muito código JavaScript, podemos colocá-lo em um arquivo separado.",
                "Os arquivos de script são anexados ao HTML com o atributo src: <script src='/path/to/script.js'></script>",
                "/path/to/script.js está um caminho absoluto para o script a partir da raiz do site.",
                "Pode-se também fornecer um caminho relativo a partir da página atual - pr exemplo, src='script.js' significaria um arquivo 'script.js' na pasta atual.",
                {
                    "Observações":[
                        "Como regra, apenas os scripts mais simples são colocados em HTML. Os mais complexos residem em arquivos separados.",
                        "A vantagem de um arquivo separado é que o navegador fará o download e o armazenará em seu cache.",
                        "Outras páginas que referenciam o mesmo script o tiram do cache em vez de baixá-lo, portanto, o arquivo é baixado apenas uma vez.",
                        "Isso reduz o tráfego e torna as páginas mais rápidas."
                    ]
                }
            ],
            "Resumo":[
                "Podemos usar uma <script>tag para adicionar código JavaScript a uma página.",
                "Os atributos type e language não são necessários.",
                "Um script em um arquivo externo pode ser inserido com <script src='path/to/script.js'></script>."
            ]
        },
        "Estrutura de Código":{
            "Afirmações":[
                "Instruções são construções de sintaxe e comandos que executam ações.",
                "Podemos ter quantas instruções em nosso código quisermos",
                "As instruções podem ser separadas com um ponto e vírgula.",
                "Geralmente, as instruções são escritas em linhas separadas para tornar o código mais legível."
            ],
            "Ponto e Vírgula":[
                "Um ponto e vírgula pode ser omitido na maioria dos casos quando existe uma quebra de linha.",
                "O JavaScript interpreta a quebra de linha como um ponto e vírgula 'implícito', isso é chamado de inserção automática de ponto e vírgula.",
                "Na maioria dos casos, uma nova linha implica um ponto e vírgula, porém 'na maioria dos casos' não significa 'sempre', em expressões incompletas a inserção automática não ocorre.",
                "Há situações em que o JavaScript “falha” em assumir um ponto-e-vírgula onde é realmente necessário, os erros que ocorrem nesses casos são bastante difíceis de encontrar e corrigir.",
                "Exemplo de falha do JS para assumir ponto e virgula pode ser analisado através do script: | alert('There will be an error') [1, 2].forEach(alert) | - o erro na variante sem ponto e vírgula ocorre porque o JavaScript não assume ponto e vírgula antes de colchetes [...].",
                "No exemplo anterior, como o ponto e vírgula não é inserido automaticamente, o código no primeiro exemplo é tratado como uma única instrução. Veja como o mecanismo o vê: alert('There will be an error')[1, 2].forEach(alert)",
                "Recomendamos colocar ponto e vírgula entre as instruções, mesmo que sejam separadas por novas linhas.",
                "Esta regra é amplamente adotada pela comunidade. Vamos observar mais uma vez - é possível deixar ponto e vírgula a maior parte do tempo.",
                "É mais seguro - especialmente para iniciantes - usá-los."
            ],
            "Comentários":[
                "Com o passar do tempo, os programas se tornam cada vez mais complexos, torna-se necessário adicionar comentários que descrevam o que o código faz e por quê.",
                "Os comentários podem ser colocados em qualquer lugar do script, eles não afetam sua execução porque o mecanismo simplesmente os ignora.",
                "Os comentários de uma linha começam com dois caracteres de barra '//', o restante da linha é um comentário, podendo ocupar uma linha completa própria ou seguir uma declaração.",
                "Os comentários de várias linhas começam com uma barra e um asterisco /*e terminam com um asterisco e uma barra */.",
                "Comentários aninhados não são suportados, um comentário de várias linhas /*...*/ não pode existir dentro de outro /*...*/.",
                "Os comentários aumentam a área de cobertura geral do código, mas isso não é um problema.",
                "Existem muitas ferramentas que minimizam o código antes de publicar em um servidor de produção.",
                "Estas ferramentas removem comentários, para que não apareçam nos scripts de trabalho.",
                "Os comentários não têm efeitos negativos sobre a produção."
            ]
        },
        "Uso Estrito":[
            "Durante muito tempo, o JavaScript evoluiu sem problemas de compatibilidade.",
            "Novos recursos foram adicionados ao idioma, enquanto a funcionalidade antiga não foi alterada.",
            "Isso teve o benefício de nunca quebrar o código existente, mas a desvantagem foi que qualquer erro ou decisão imperfeita dos criadores do JavaScript ficou para sempre na linguagem.",
            "Esse foi o caso até 2009, quando o ECMAScript 5 (ES5) apareceu, ele adicionou novos recursos ao idioma e modificou alguns dos existentes.",
            "Para manter o código antigo funcionando, a maioria das modificações do ES5 está desativada por padrão, você precisa ativá-los explicitamente com uma diretiva especial: 'use strict'.",
            "A diretiva se parece com uma string: \"use strict\"ou 'use strict', e quando está localizado na parte superior de um script, o script inteiro funciona da maneira 'moderna'.",
            "Não existe uma diretiva como 'no use strict', que reverteria o mecanismo para o comportamento antigo, quando entramos no modo estrito, não há como voltar atrás.",
            "O JavaScript moderno suporta 'classes' e 'módulos' - estruturas de linguagem avançadas, que são ativam o uso estrito automaticamente, ou seja, não precisamos adicionar a 'use strict' diretiva, se os usarmos."
        ],
        "Variáveis":{
            "Introdução":[
                "Uma variável é um 'armazenamento nomeado' para dados.",
                "Para criar uma variável em JavaScript, use a palavra - chave 'let' ou 'const'.",
                "A declaração a seguir cria (em outras palavras: declara ) uma variável com o nome 'mensagem': let message - em scripts mais antigos, você também pode encontrar outra palavra-chave: 'var' em vez de 'let'.",
                "A palavra-chave 'var' é quase a mesma que let, ele também declara uma variável, mas de uma maneira um pouco diferente da “velha escola”, tendo diferença em seu escopo, var têm escopo global, enquanto let e const possuêm escopo local."
            ],
            "Analogia da Vida Real":[
                "Podemos entender facilmente o conceito de uma 'variável' se o imaginarmos como uma 'caixa' de dados, com um adesivo com um nome exclusivo.",
                "A variável mensagem pode ser imaginada como uma caixa rotulada 'mensagem' com o valor 'Hello!' nela (conteúdo dentro da caixa).",
                "Podemos colocar qualquer valor (conteúdo) na caixa, e também podemos alterá-lo quantas vezes quisermos.",
                "Quando o valor é alterado, os dados antigos são removidos da variável",
                "Também podemos declarar duas variáveis ​​e copiar dados de uma para a outra.",
                {
                    "Linguagens Funcionais":[
                        "É interessante notar que existem linguagens de programação funcionais , como Scala ou Erlang, que proíbem a alteração de valores de variáveis.",
                        "Nesses idiomas, uma vez que o valor é armazenado 'na caixa', ele fica lá para sempre.",
                        "Se precisarmos armazenar outra coisa, o idioma nos obriga a criar uma nova caixa (declarar uma nova variável), de modo que não podemos reutilizar o antigo.",
                        "Embora possa parecer um pouco estranho à primeira vista, essas linguagens são bastante capazes de desenvolvimento sério.",
                        "Mais do que isso, existem áreas como cálculos paralelos em que essa limitação confere certos benefícios.",
                        "Estudar esses idiomas (mesmo que você não pretenda usá-lo em breve) é recomendado para ampliar a mente."
                    ]
                }
            ],
            "Nomenclatura":{
                "Limitações":[
                    "O nome deve conter apenas letras, dígitos ou os símbolos $ e _.",
                    "O primeiro caractere não deve ser um dígito.",
                    "Quando o nome contém várias palavras, o camelCase é comumente usado.",
                    "O cifrão '$' e o sublinhado '_'também podem ser usados ​​nos nomes, são símbolos regulares, assim como letras, sem nenhum significado especial."
                ],
                "Alertas Importantes": [
                    "Variáveis ​​nomeadas 'apple' e 'AppLE' são duas variáveis ​​diferentes.",
                    "Letras não latinas são permitidas, mas não recomendadas - é possível usar qualquer idioma, incluindo letras cirílicas ou mesmo hieróglifos: let имя = '...'; let 我 = '...';",
                    "Tecnicamente, não há erro, letras latinas são permitidas, mas existe uma tradição internacional para usar o inglês em nomes de variáveis, mesmo se estivermos escrevendo um pequeno script, ele pode ter uma vida longa pela frente, pessoas de outros países podem precisar ler algum tempo.",
                    "Há uma lista de palavras reservadas , que não podem ser usadas como nomes de variáveis ​​porque são usadas pelo próprio idioma - por exemplo: let, class, return, e function são reservados.",
                    "Normalmente, precisamos definir uma variável antes de usá-la. Porém, antigamente, era tecnicamente possível criar uma variável mediante uma mera atribuição do valor sem o uso let. Isso ainda funciona agora se não colocarmos 'use strict' em nossos scripts para manter a compatibilidade com scripts antigos."
                ],
                "Constantes":[
                    "Para declarar uma variável constante (imutável), use em 'const' vez de 'let'",
                    "Variáveis ​​declaradas usando 'const' são chamadas de 'constantes', elas não podem ser reatribuídos, de modo que uma tentativa de fazer isso causaria um erro.",
                    "Quando um programador tem certeza de que uma variável nunca será alterada, pode declara-la 'const' para garantir e comunicar claramente esse fato a todos.",
                    "Existe uma prática generalizada de usar constantes como aliases para valores difíceis de lembrar que são conhecidos antes da execução - essas constantes são nomeadas usando letras maiúsculas e sublinhados.",
                    "As constantes nomeadas em maiúsculas são usadas apenas como aliases para valores 'codificados'.",
                    "Geralmente usamos letras maiúsculas para constantes que são 'codificadas, em outras palavras, quando o valor é conhecido antes da execução e diretamente escrito no código.",
                    {
                        "Exemplos de Constante em Maiúscula":[
                            "A variável: const BIRTHDAY = '18.04.1982' ... birthday é conhecido antes da execução, podemos usar maiúsculas para isso.",
                            "A variável: const age = someCode(BIRTHDAY) ... é avaliado em tempo de execução, hoje temos uma idade, um ano depois de outra, é constante, no sentido de que não muda através da execução do código - mas é um pouco 'menos constante' do que birthday, portanto devemos manter a letra minúscula."
                        ]
                    }
                ],
                "Nomenclaturas Corretas":[
                    "Um nome de variável deve ter um significado claro e óbvio, descrevendo os dados que ela armazena.",
                    "A nomeação de uma variável é uma das habilidades mais importantes e complexas da programação.",
                    "Uma rápida olhada nos nomes das variáveis ​​pode revelar qual código foi escrito por um iniciante versus um desenvolvedor experiente.",
                    "Em um projeto real, a maior parte do tempo é gasta modificando e estendendo uma base de código existente, em vez de escrever algo completamente separado do zero.",
                    "Quando voltamos a algum código depois de fazer outra coisa por um tempo, é muito mais fácil encontrar informações bem rotuladas, em outras palavras, quando as variáveis ​​têm bons nomes.",
                    "Dedique algum tempo a pensar no nome certo para uma variável antes de declará-la. Isso o recompensará generosamente.",
                    {
                        "Boas Práticas":[
                            "Use nomes legíveis por humanos como userName ou shoppingCart.",
                            "Fique longe de abreviaturas ou nomes curtos como a, b, c, a menos que você realmente saiba o que está fazendo.",
                            "Faça nomes maximamente descritivos e concisos - exemplos de nomes ruins são data e value. Tais nomes não dizem nada, mas não há problema em usá-los se o contexto do código tornar excepcionalmente óbvio quais dados ou valores a variável está fazendo referência.",
                            "Concorde com os termos da sua equipe e em sua própria mente - se um visitante do site é chamado de 'usuário', devemos nomear variáveis ​​relacionadas currentUser ou em newUser em vez de currentVisitor ou newManInTown."
                        ],
                        "Reutilização de Variáveis":[
                            "Existem alguns programadores preguiçosos que, em vez de declarar novas variáveis, tendem a reutilizar as existentes.",
                            "Como resultado, suas variáveis ​​são como caixas nas quais as pessoas jogam coisas diferentes sem alterar seus adesivos.",
                            "O que há dentro da caixa agora? Quem sabe? Precisamos nos aproximar e conferir, em suma, uma variável extra é boa, não má.",
                            "Esses programadores economizam um pouco na declaração de variáveis, mas perdem dez vezes mais na depuração.",
                            "Navegadores e minificadores de JavaScript modernos otimizam o código suficientemente bem, para que não crie problemas de desempenho",
                            "O uso de variáveis ​​diferentes para valores diferentes pode até ajudar o mecanismo a otimizar seu código."
                        ]
                    }
                ],
                "Resumo":[
                    "Podemos declarar variáveis para armazenar dados usando as palavras-chave: 'var', 'let' ou 'const'.",
                    "let - é uma declaração de variável moderna.",
                    "var - é uma declaração variável da velha escola - normalmente, não o usamos.",
                    "const- é como let, mas o valor da variável não pode ser alterado.",
                    "As variáveis ​​devem ser nomeadas de uma maneira que permita entender facilmente o que há dentro delas."
                ]
            }
        },
        "Tipos de Dados":{
            "Introdução":[
                "Um valor em JavaScript é sempre de um determinado tipo - por exemplo: uma sequência ou um número.",
                "Existem oito tipos de dados básicos em JavaScript.",
                "Podemos colocar qualquer tipo em uma variável - por exemplo: uma variável pode em um momento ser uma sequência e, em seguida, armazenar um número.",
                "As linguagens de programação que permitem tais coisas, como JavaScript, são chamadas de 'dynamically typed', o que significa que existem tipos de dados, mas as variáveis ​​não estão vinculadas a nenhum deles."
            ],
            "Número":[
                "O tipo de número representa números inteiros e de ponto flutuante.",
                "Existem muitas operações para números, por exemplo, multiplicação *, divisão /, adição +, subtração -e assim por diante.",                
                "Além de números regulares, existem os chamados “valores numéricos especiais” que também pertencem a este tipo de dados: Infinity, -Infinity e NaN.",
                "Infinity representa o infinito matemático ∞. É um valor especial que é maior que qualquer número.",
                "NaN representa um erro computacional - é o resultado de uma operação matemática incorreta ou indefinida - se houver NaN em algum lugar de uma expressão matemática, ela se propaga para todo o resultado.",
                "Fazer matemática é 'seguro' em JavaScript - podemos fazer qualquer coisa: dividir por zero, tratar cadeias não numéricas como números, etc - o script nunca irá parar com um erro fatal ('morrer'), na pior das hipóteses, obteremos NaNo resultado."
            ],
            "BigInt":[
                "No JavaScript, o tipo 'número' não pode representar valores inteiros maiores que ( (2 elevado a 53) - 1 ) ou menores que -  ( (2 elevado a 53) - 1 ) para negativos, trata-se de uma limitação técnica causada por sua representação interna.",
                "Para a maioria dos propósitos, isso é suficiente, mas às vezes precisamos de números realmente grandes, por exemplo, para carimbos de data / hora de criptografia ou precisão de microssegundos.",
                "O tipo BigInt foi adicionado recentemente ao idioma para representar números inteiros de comprimento arbitrário.",
                "Um valor BigInt é criado anexando 'n' no final de um número inteiro: const bigInt = 1234567890123456789012345678901234567890n;",
                "Problemas de compatibilidade: no momento, BigInt há suporte para Firefox / Chrome / Edge, mas não no Safari / IE."
            ],
            "String":[
                "Uma string em JavaScript deve estar entre aspas.",
                "Tipos de Aspas: Double Quotes => \"Hello\" ; Simple Quotes => 'Hello'; Backticks => `Hello`",
                "Aspas duplas e simples são 'simples' - praticamente não há diferença entre eles no JavaScript.",
                "Backticks são citações de 'funcionalidade estendida', eles nos permitem incorporar variáveis ​​e expressões em uma string, envolvendo-as ${…}.",
                "Utilizando backticks a expressão interna ${…} é avaliada e o resultado se torna parte da string. Podemos colocar qualquer coisa lá: uma variável como name ou uma expressão aritmética como 1 + 2 ou algo mais complexo.",
                "Em alguns idiomas, existe um tipo especial de 'caractere' para um único caractere. Por exemplo, na linguagem C e em Java, isso é chamado de 'char'.",
                "Em JavaScript, não existe tipo char, há apenas um tipo: string - uma string pode consistir em apenas um caractere ou muitos deles."
            ],
            "Booleano":[
                "O tipo booleano possui apenas dois valores: truee false.",
                "Esse tipo é comumente usado para armazenar valores sim / não: true significa 'sim, correto' e false significa 'não, incorreto'.",
                "Valores booleanos também são resultado de comparações"
            ],
            "Nulo":[
                "O 'null' (valor especial), forma um tipo separado próprio, que contém apenas o valor nulo.",
                "Em JavaScript, null não é uma 'referência a um objeto inexistente' ou um 'ponteiro nulo', como em alguns outros idiomas.",
                "Null é apenas um valor especial que representa 'nada', 'vazio' ou 'valor desconhecido'."
            ],
            "Indefinido":[
                "O valor especial undefined também se destaca, faz um tipo próprio, assim como null.",
                "O significado de undefined é 'valor não atribuído'.",
                "Se uma variável for declarada, mas não atribuída, seu valor será undefined por padrão.",
                "Tecnicamente, é possível atribuir explicitamente undefined a uma variável, mas não recomendamos fazer isso.",
                "Normalmente, é usado null para atribuir um valor 'vazio' ou 'desconhecido' a uma variável, enquanto undefined é reservado como um valor inicial padrão para itens não atribuídos."
            ],
            "Objetos e Simbolos":[
                "O objecttipo é especial, todos os outros tipos são chamados de 'primitivos' porque seus valores podem conter apenas uma única coisa (seja uma string ou um número ou qualquer outra coisa).",
                "Os objetos são usados ​​para armazenar coleções de dados e entidades mais complexas.",
                "O tipo symbol é usado para criar identificadores exclusivos para objetos."
            ],
            "Operador typeof":[
                "O typeof operador retorna o tipo do argumento.",
                "É útil quando queremos processar valores de diferentes tipos de maneira diferente ou apenas queremos fazer uma verificação rápida.",
                "Ele suporta duas formas de sintaxe: como um operador: typeof x; como uma função: typeof(x), em outras palavras, ele funciona com parênteses ou sem eles. O resultado é o mesmo.",
                "A sua utilização retorna uma sequência (string) com o nome do tipo.",
                {
                    "Observações":[
                        "O resultado de typeof null é 'object', esse é um erro de comportamento oficialmente reconhecido, proveniente dos primeiros dias do JavaScript e mantido para compatibilidade. Definitivamente, null não é um objeto. É um valor especial com um tipo separado próprio.",
                        "O resultado de typeof alerté 'function', porque alert é uma função, não há nenhum tipo de “função” especial no JavaScript, as funções pertencem ao tipo de objeto.",
                        "O typeof trata função de maneira diferente, retornando 'function', isso também vem dos primeiros dias do JavaScript - tecnicamente, esse comportamento não é correto, mas pode ser conveniente na prática."
                    ]
                }
            ],
            "Resumo":{
                "Relevantes":[
                    "Existem 8 tipos de dados básicos em JavaScript",
                    "O typeof operador nos permite ver qual tipo está armazenado em uma variável - exemplo: typeof xou typeof(x) => retorna uma string com o nome do tipo, como 'string'.",
                    "Para o retorno de typeof null sendo 'object', esse é um erro no idioma, na verdade não é um objeto."
                ],
                "Tipos":{
                    "number": "para números de qualquer tipo: número inteiro ou ponto flutuante, os números inteiros são limitados por ± 2 53 .",
                    "bigint": "é para números inteiros de comprimento arbitrário.",
                    "string": "para cordas. Uma sequência pode ter zero ou mais caracteres, não há um tipo de caractere separado.",
                    "boolean": "para true/ false.",
                    "null": "para valores desconhecidos - um tipo independente que possui um único valor null.",
                    "undefined": "para valores não atribuídos - um tipo independente que possui um único valor undefined.",
                    "object": "para estruturas de dados mais complexas.",
                    "symbol": "para identificadores exclusivos."
                }
            }
        },
        "Interação":{
            "Conceito": "Através do navegador podemos interagir com usuários com alguns funções: alert, prompte confirm.",
            "Alerta":[
                "Mostra uma mensagem e aguarda o usuário pressionar 'OK'.",
                "A mini-janela com a mensagem é chamada de janela modal.",
                "A palavra 'modal' significa que o visitante não pode interagir com o restante da página, pressionar outros botões, etc., até que tenha lidado com a janela, nesse caso - até que eles pressione 'OK'."
            ],
            "Prompt":[
                "A função prompt aceita dois argumentos: title: o texto para mostrar o visitante; default: um segundo parâmetro opcional, o valor inicial para o campo de entrada.",
                "Mostra uma janela modal com uma mensagem de texto, um campo de entrada para o visitante e os botões OK / Cancelar.",
                "O visitante pode digitar algo no campo de entrada rápida e pressionar OK",
                "O visitante pode cancelar a entrada pressionando Cancelar ou pressionando a tela Esc, então obtemos null como retorno.",
                {
                    "Observações":[
                        "O segundo parâmetro é opcional, mas se não for fornecido, o Internet Explorer inserirá o texto 'undefined' no prompt.",
                        "Para que as solicitações tenham uma boa aparência no IE, recomendamos sempre fornecer o segundo argumento."
                    ]
                }
            ],
            "Confirmar":[
                "A função confirm mostra uma janela modal com um questione dois botões: OK e Cancelar.",
                "O resultado é true se OK for pressionado ou false se for pressionado Cancelar."
            ],
            "Resumo":{
                "alert": "mostra uma mensagem.",
                "prompt": "mostra uma mensagem pedindo ao usuário para inserir texto - retorna o texto ou, se você clicar em Esc no botão Cancelar ou null,.",
                "confirm": "mostra uma mensagem e aguarda o usuário pressionar “OK” ou “Cancelar” - retorna true para OK e false para Cancelar / Esc.",
                "Considerações":[
                    "Todos esses métodos são modais: eles interrompem a execução do script e não permitem que o visitante interaja com o restante da página até que a janela seja fechada.",
                    "Existem duas limitações compartilhadas por todos os métodos descritos.",
                    "1ª Limitação: a localização exata da janela modal é determinada pelo navegador - normalmente, é no centro.",
                    "2ª Limitação: a aparência exata da janela também depende do navegador - não podemos modificá-lo.",
                    "Esse é o preço da simplicidade - existem outras maneiras de mostrar janelas mais agradáveis ​​e uma interação mais rica com o visitante, mas se for 'sinos e assobios' não importam muito, esses métodos funcionam muito bem."
                ]
            }
        },
        "Conversões":{
            "Tipos Primitivos":{
                "Introdução":[
                    "Na maioria das vezes, operadores e funções convertem automaticamente os valores dados a eles para o tipo certo.",
                    "Por exemplo: alert converte automaticamente qualquer valor em uma string para mostrá-lo.",
                    "Operações matemáticas convertem valores em números.",
                    "Também há casos em que precisamos converter explicitamente um valor para o tipo esperado."
                ],
                "String":[
                    "A conversão de string ocorre quando precisamos do formato texto de um valor.",
                    "Por exemplo: alert(value) faz isso para mostrar o valor.",
                    "Também podemos chamar a String(value)função para converter um valor em uma string: let value = true; value = String(value);",
                    "A conversão de strings é mais óbvia, onde false se torna 'false', null se torna 'null', etc."
                ],
                "Numérica":[
                    "A conversão numérica acontece automaticamente em funções e expressões matemáticas.",
                    "Por exemplo: quando a divisão é aplicada a não números: alert( '6' / '2' ); // resulta em 3, strings são convertidas para número.",
                    "Podemos usar a Number(value)função para converter explicitamente a value em um número: let str = '123'; let num = Number(str);",
                    "A conversão explícita geralmente é necessária quando lemos um valor de uma fonte baseada em string, como um formulário de texto, mas esperamos que um número seja inserido.",
                    "Se a sequência não for um número válido, o resultado dessa conversão será NaN.",
                    {
                        "Regras de Conversão Numérica":[
                            "Converter undefined se torna NaN",
                            "Converter null se torna 0",
                            "Converter true e false se torna 1 e 0",
                            "Os espaços em branco do início e do fim são removidos - se a sequência restante estiver vazia, o resultado será 0, caso contrário, o número é 'lido' da string - um erro dá NaN.",
                            {
                                "Exemplos":[
                                    "alert( Number('   123   ') ); // 123",
                                    "alert( Number('123z') );      // NaN (error reading a number at 'z')",
                                    "alert( Number(true) );        // 1",
                                    "alert( Number(false) );       // 0"
                                ]
                            }
                        ]
                    }
                ],
                "Booleana":[
                    "A conversão booleana é a mais simples.",
                    "Isso acontece em operações lógicas, mas também pode ser executado explicitamente com uma chamada para Boolean(value).",
                    "No JavaScript, uma string não vazia é sempre true ou mesmo uma string com 0 ainda será true.",
                    {
                        "Regra de Conversão":[
                            "Valores que são intuitivamente 'esvaziar', como 0, uma cadeia vazia, null, undefined, e NaN, se tornar false.",
                            "Outros valores se tornam true."
                        ]
                    }
                ],
                "Resumo":[
                    "As três conversões de tipo mais usadas são: string, number e boolean.",
                    "String: ocorre quando produzimos algo - pode ser realizado com String(value) - a conversão para string geralmente é óbvia para valores primitivos.",
                    "Numeric: ocorre em operações matemáticas - pode ser realizado com Number(value).",
                    "Boolean: ocorre em operações lógicas - pode ser realizado com Boolean(value).",
                    "As exceções notáveis ​​em que as pessoas geralmente cometem erros são: undefined é NaN como um número, não 0; e '0' em strings ou apenas contendo espaço como '  ' são verdadeiras como booleanas."
                ]
            }
        },
        "Operadores Básicos":{
            "Terminologias":[
                "Um operando - é a que operadores são aplicados - por exemplo, na multiplicação de 5 * 2 existem dois operandos: o operando esquerdo é 5 e o operando direito é 2 , ás vezes, as pessoas chamam esses 'argumentos' em vez de 'operandos'.",
                "Um operador é unário se tiver um único operando - por exemplo, a negação unária -reverte o sinal de um número.",
                "Um operador é binário se tiver dois operandos."
            ],
            "Operações Matemáticas Suportadas":[
                "Adição +",
                "Subtração -",
                "Multiplicação *",
                "Divisão /",
                "Restante %",
                "Exponenciação **.",
                {
                    "Observações":[
                        "O operador restante %, apesar de sua aparência, não está relacionado a percentagem, o resultado de a % bé o restante da divisão inteira de apor b.",
                        "O operador de exponenciação a ** b multiplica a em b vezes (potência)."
                    ]
                }
            ],
            "Concatenação de Strings":[
                "Normalmente, o operador mais + soma números, mas, se o binário +for aplicado a cadeias, ele as mescla (concatena).",
                "O binário + é o único operador que suporta seqüências de caracteres dessa maneira.",
                "Outros operadores aritméticos trabalham apenas com números e sempre convertem seus operandos em números."
            ],
            "Conversão Numérica Unária":[
                "O operador + existe em duas formas: a forma binária que usamos acima e a forma unária.",
                "O + unário ou, em outras palavras, o operador + aplicado a um único valor, não faz nada com os números, mas se o operando não for um número, o unário mais o converterá em um número.",
                "Praticamente faz a mesma coisa que Number(...), só que é mais curto.",
                "A necessidade de converter seqüências de caracteres em números surge com muita frequência.",
                "Por exemplo: se estamos obtendo valores dos campos de formulário HTML, eles geralmente são strings.",
                "Do ponto de vista de um matemático, a abundância de vantagens pode parecer estranha.",
                "Do ponto de vista de um programador, não há nada de especial: vantagens unárias são aplicadas primeiro, elas convertem seqüências de caracteres em números e, em seguida, a soma binária as resume."   
            ],
            "Operador Precedente":[
                "Se uma expressão tiver mais de um operador, a ordem de execução será definida por sua precedência ou, em outras palavras, pela ordem de prioridade padrão dos operadores.",
                "Desde a escola, todos sabemos que a multiplicação na expressão 1 + 2 * 2 deve ser calculada antes da adição, essa é exatamente a mesma coisa da precedência - diz-se que a multiplicação tem uma precedência mais alta que a adição.",
                "Os parênteses substituem qualquer precedência; portanto, se não estamos satisfeitos com o pedido padrão, podemos usá-los para alterá-lo - por exemplo, escreva (1 + 2) * 2.",
                "Existem muitos operadores em JavaScript, todo operador tem um número de precedência correspondente.",
                "Aquele com o número maior de precedência é executado primeiro, se a precedência for a mesma, a ordem de execução será da esquerda para a direita.",
                "Tabela de Precedência: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"
            ],
            "Operador Atribuição":[
                "Uma atribuição = também é um operador, ele está listado na tabela de precedência com a prioridade muito baixa de 3.",
                "É por isso que, quando atribuímos uma variável, como x = 2 * 2 + 1, os cálculos são feitos primeiro e depois o =é avaliado, armazenando o resultado em x.",
                "O fato do = ser um operador, não uma construção de linguagem 'mágica' tem uma implicação interessante.",
                "A maioria dos operadores em JavaScript retorna um valor, isso é óbvio para + e -, mas também é verdade para =.",
                "A chamada 'x = value' grava o valor no x e depois o retorna."
            ],
            "Incremento e Decremento": [
                "O incremento / decremento só pode ser aplicado a variáveis, tentar usá-lo em um valor como 5++ resultará em erro.",
                "Se o resultado do incremento / decremento não for usado, não haverá diferença em qual forma usar.",
                "Se quisermos aumentar um valor e usar imediatamente o resultado do operador, precisamos do formato do prefixo.",
                "Se quisermos incrementar um valor, mas usar o valor anterior, precisamos do formulário postfix.",
                "Os operadores ++/-- também podem ser usados ​​dentro de expressões, sua precedência é maior que a maioria das outras operações aritméticas.",
                "Embora tecnicamente aceitável, a notação 'let counter = 1; alert( 2 * counter++ );' geralmente torna o código menos legível, uma linha faz várias coisas - não é bom.",
                "Ao ler o código, uma rápida varredura ocular “vertical” pode facilmente perder algo assim counter++ e não será óbvio que a variável aumentou - aconselhamos um estilo de 'uma linha - uma ação'"
            ],
            "Operadores bit a bit":[
                "Operadores bit a bit tratam argumentos como números inteiros de 32 bits e trabalham no nível de sua representação binária.",
                "Esses operadores não são específicos para JavaScript. Eles são suportados na maioria das linguagens de programação.",
                "Esses operadores são usados ​​muito raramente, quando precisamos mexer com números no nível mais baixo (bit a bit).",
                "Não precisaremos desses operadores tão cedo, pois o desenvolvimento da Web os utiliza pouco, mas em algumas áreas especiais, como criptografia, eles são úteis.",
                "Você pode ler o artigo Bitwise Operators no MDN quando houver necessidade => https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators"
            ],
            "Operador Vírgula":[
                "O operador de vírgula, é um dos operadores mais raros e incomuns.",
                "Às vezes, é usado para escrever um código mais curto, por isso precisamos conhecê-lo para entender o que está acontecendo.",
                "O operador vírgula nos permite avaliar várias expressões, dividindo-as por vírgula ,.",
                "Cada um deles é avaliado, mas apenas o resultado do último é retornado: let a = (1 + 2, 3 + 4); alert( a ); // 7 (the result of 3 + 4)",
                "Observe que o operador de vírgula tem uma precedência muito baixa, menor que =, portanto, parênteses são importantes no exemplo.",
                "Às vezes, as pessoas o usam em construções mais complexas para colocar várias ações em uma linha: for (a = 1, b = 3, c = a * b; a < 10; a++) { ... }"

            ]

        },
        "Operadores Condicionais":{
            "Introdução": "Às vezes, precisamos executar ações diferentes com base em condições diferentes, para fazer isso, podemos usar a declaração if e o operador condicional ?, também chamado de operador 'ponto de interrogação'.",
            "A declaração 'if'":[
                "A instrução if(...) avalia uma condição entre parênteses e, se o resultado for true, executa um bloco de código.",
                "A if (…)instrução avalia a expressão entre parênteses e converte o resultado em um booleano.",
                "Recomendamos agrupar seu bloco de código com chaves {}sempre que você usar uma ifinstrução, mesmo se houver apenas uma instrução a ser executada, isso melhora a legibilidade."
            ],
            "A cláusula else'": "A declaração if  pode conter um bloco opcional 'else' - é executado quando a condição é falsa.",
            "Condições: 'if else'": "Às vezes, gostaríamos de testar várias variantes de uma condição. A else ifcláusula nos permite fazer isso.",
            "Operador condicional '?'":[
                "Às vezes, precisamos atribuir uma variável, dependendo de uma condição.",
                "O chamado operador 'condicional' ou 'ponto de interrogação' permite fazer isso de maneira mais curta e simples.",
                "O operador é representado por um ponto de interrogação ?.",
                "Às vezes, é chamado de 'ternário', porque o operador possui três operandos.",
                "É o único operador em JavaScript que possui muitos.",
                "A sintaxe é: let result = condition ? value1 : value2 ... o condition é avaliado: se é verdade, então value1é retornado, caso contrário - value2.",
                "Em ( age > 18) Tecnicamente, podemos omitir os parênteses age > 18. O operador de ponto de interrogação tem uma baixa precedência, portanto, é executado após a comparação >.",
                "Parênteses tornam o código mais legível, por isso recomendamos usá-los.",
                "Uma sequência de operadores de ponto de interrogação ?pode retornar um valor que depende de mais de uma condição.",
                "Às vezes, o ponto de interrogação ? é usado como um substituto para if: ( 1 == 1) ? alert('OK!') : alert('Wrong.') ... mas não é recomendável usar o operador de ponto de interrogação dessa maneira.",
                "O objetivo do operador de ponto de interrogação ?é retornar um valor ou outro, dependendo de sua condição, use-o exatamente para isso - use if quando você precisar executar diferentes ramificações de código."
            ]
        },
        "Operadores Lógicos":{
            "Introdução":[
                "Existem três operadores lógicos no JavaScript: ||(OR), &&(AND), !(NOT).",
                "Embora sejam chamados de 'lógicos', eles podem ser aplicados a valores de qualquer tipo, não apenas booleanos, e o resultado deles também pode ser de qualquer tipo."
            ],
            "Operador || (OR)":[
                "O operador 'OR' é representado com dois símbolos de linha vertical: result = a || b;",
                "Na programação clássica, o OR lógico destina-se a manipular apenas valores booleanos.",
                "Se algum de seus argumentos for true, ele retornará true, caso contrário, ele retornará false.",
                "Em JavaScript, o operador é um pouco mais complicado e mais poderoso.",
                "Uma cadeia de OR '||' retorna o primeiro valor de verdade ou o último se nenhum valor de verdade for encontrado.",
                {
                    "Fluxo de Operação":{
                        "1º": "Avalia operandos da esquerda para a direita.",
                        "2º": "Para cada operando, converte-o em booleano. Se o resultado for true, para e retorna o valor original desse operando.",
                        "3º": "Se todos os operandos foram avaliados (ou seja, todos foram false), retorna o último operando."
                    },
                    "Avaliação de Curto-Circuito.":[
                        "Outra característica do ||operador OR é a chamada avaliação de 'curto-circuito'.",
                        "Isso significa que || processa seus argumentos até que o primeiro valor de verdade seja alcançado e, em seguida, o valor é retornado imediatamente, sem sequer tocar no outro argumento.",
                        "Essa importância desse recurso se torna óbvia se um operando não for apenas um valor, mas uma expressão com um efeito colateral, como uma atribuição de variável ou uma chamada de função.",
                        "Às vezes, as pessoas usam esse recurso para executar comandos somente se a condição na parte esquerda for falsa ou se a primeira operação for o suficiente;"
                    ]
                }
            ],
            "Operador && (AND)":[
                "O operador AND é representado com dois e comercial &&: result = a && b;",
                "Na programação clássica, AND retorna true se todos os operandos são verdadeiros e de false caso o contrário.",
                "Assim como com OR, qualquer valor é permitido como um operando de AND",
                "AND retorna o primeiro valor falso ou o último valor, se nenhum foi encontrado.",
                {
                    "Fluxo de Operação":{
                        "1º": "Avalia operandos da esquerda para a direita.",
                        "2º": "Para cada operando, converte-o em um booleano, se o resultado for false, para e retorna o valor original desse operando.",
                        "3º": "Se todos os operandos foram avaliados (ou seja, todos foram verdadeiros), retorna o último operando."
                    },
                    "Observações":[
                        "A precedência do &&operador AND é maior que OR ||.",
                        "Às vezes, as pessoas usam o &&operador AND como um 'mais curto para escrever if': (1 > 0) && alert( 'Greater than zero!' );",
                        "Embora a variante com && pareça mais curta, ifé mais óbvia e tende a ser um pouco mais legível.",
                        "Recomendamos o uso de todas as construções para sua finalidade: use if se quisermos se e use && se quisermos AND."
                    ]
                }
            ],
            "Operador ! (NOT)":[
                "O operador booleano NOT é representado com um sinal de exclamação !.",
                "O operador aceita um único argumento e faz o seguinte: converte o operando de tipo booleano: true/false, retornando o valor inverso.",
                "!!Às vezes, um NOT duplo é usado para converter um valor em tipo booleano: alert( !!'non-empty string' );",
                "A precedência de NOT !é a mais alta de todos os operadores lógicos, portanto, sempre é executada primeiro, antes && ou ||."
            ]
        },
        "Operador Coalescente Nulo '??'":{
            "Introdução":[
                "Esta é uma adição recente ao idioma. Navegadores antigos podem precisar de polyfills.",
                "O operador coalescente nulo ?? fornece uma sintaxe curta para selecionar uma primeira variável 'definida' da lista.",
                "O resultado das variaveis 'a' ?? 'b' é -> 'a' se não é null ou undefined ... b, se for qualquer outro tipo.",
                "Resumindo: x = a ?? bé um pequeno equivalente a -> x = (a !== null && a !== undefined) ? a : b;",
                "A precedência do ?? operador é bastante baixa: 7na tabela MDN -> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table.",
                "Se precisarmos usar ?? uma expressão complexa, considere adicionar parênteses.",
                "Devido a razões de segurança, é proibido o uso ??em conjunto com &&e ||operadores. Caso necessário, use parênteses explícitos para corrigi-lo."
            ],
            "Resumo":[
                "O operador coalescente nulo ?? fornece uma maneira curta de escolher um valor 'definido' na lista.",
                "É usado para atribuir valores padrão a variáveis.",
                "O operador ?? tem uma precedência muito baixa, um pouco maior que ? e =.",
                "É proibido usá-lo com ||ou &&sem parênteses explícitos."
            ]
        }
    }
    
    
}   