{
    "Indefinidos HTTP e CSS": [
        "Todas as tags: <!DOCTYPE> <html> <head> são fundamentais na estrutura de uma página.",
        "A tag <a> serve justamente como uma âncora, um link, que vai nos levar para outro ponto na internet.",
        "A propriedade text-transform é a responsável pela transformação do texto para maiúsculo, quando usamos o valor uppercase",
        "A propriedade text-transform é a responsável pela transformação do texto para maiúsculo, quando usamos o valor uppercase",
        "O navegador cria o estilo para todas as tags que ele acha adequadas, então precisamos removê-lo, para que o estilo que criamos não seja influenciado pelo estilo que o navegador adiciona.",
        "Com o position: absolute, é possivel posicionar meu elemento em qualquer lugar da página.",
        "Ao usar o cálculo da margin automático, delegamos para o navegador fazer a conta de calcular a largura que resta, dividir por dois, e adicionar metade em cada um dos lados.",
        "As tags semânticas fazem com que o navegador entenda melhor o nosso conteúdo, e com isso carregue melhor a nossa página.",
        "Display inline-block corresponde a aplicação de ter o comportamento do tamanho do seu conteúdo, mas regulável o tamanho pode ser ajustado, tanto na largura, quanto na altura.",
        "Ao usar padding adicionando espaçamento interno:  o elemento aumenta o seu tamanho.",
        "Na estrutura de 'caixas' do CSS, a borda fica posicionada entre o padding e a margin.",
        "Com a propriedade border-radius, podemos desenhar o canto arredondado dos elementos.",
        "Em todos os elementos do HTML consigo mapear o comportamento com CSS e alterar o visual do elemento.",
        "No comportamento 'hover', mapeamos o comportamento do mouse por cima do elemento, e podemos usar isso para destacar visualmente o elemento em questão.",
        "No CSS, ao referenciarmos o endereço de uma imagem, usamos o valor url.",
        "Os caracteres Unicode estão disponíveis para serem usados como um complemento ao nosso texto.",
        "Um formulário pode servir para, entre outras coisas, enviar os dados para uma outra página, capturar informações que o usuário digitar e enviar dados para um servidor.",
        "A propriedade padding serve para alterarmos o espaçamento interno, entre o conteúdo e a borda.",
        "A codificação UTF-8 abrange praticamente todos os sistemas de escritas usadas pelo mundo todo, além disso, todos os computadores vêm com suporte a essa codificação, assim, se queremos que nossas páginas sejam acessíveis por todos, a codificação UTF-8 é a melhor opção.",
        "A propriedade name só pode ser 'preenchida' uma única vez, por isso que, quando eu seleciono um dos itens, ele desmarca o outro, mantendo somente um selecionado.",
        "Quando temos um estilo que pode ser repetido, uma excelente estratégia é extrair isso para uma classe e usar a classe para aplicar esses estilos nos nossos elementos.",
        "Usar os seletores dos itens separados por vírgula, é uma forma simples de fazermos a mesma configuração de CSS funcionar para os dois itens, sendo eles seletores dos elementos, de ids ou de classes.",
        "A hierarquia de aplicação do css ocorre de inline -> id -> class -> tag, sendo que podemos considera-los como força, ao passo que tag+class tem força maior do que apenas a classe",    
        "Quando adicionamos a propriedade required, o navegador nos ajuda a validar se aquele campo está preenchido.",
        "A tag <fieldset> é usada para criar uma divisão no nosso formulário, com um ou mais <input>, e a tag <legend> que usamos para um título de um grupo de campos em qualquer formulário.",
        "Utilizamos a propriedade transition para prover uma transição visual de um elemento.",
        "Utilizamos a propriedade transform: scale() para aumentar um elemento proporcionalmente.",
        "As tags <thead>, <tbody> e <tfoot> ajudam a deixar o conteúdo da tabela mais bem dividido e mais semântico.",
        "A diferença entre <div> e <section> é que no primeiro caso, trata-se apenas de uma divisão visual, já no caso da <section> teremos uma divisão por conteúdo complexo, semanticamente homogêneo, em suma, Para um bloco onde o conteúdo tenha o mesmo significado, o mesmo sentido, usamos uma <section>.",
        "No universo HTML e CSS, ao falarmos de estilo, usamos uma classe, quando falamos de comportamento, usamos o identificador.A força da classe não é tão grande, então ela pode ser sobrescrita e seu estilo alterado, por isso é importante em CSS sempre utilizarmos classes.",
        "Sempre que criamos uma classe do CSS é importante que ela seja específica e ao mesmo tempo o mais genérica possível, ou seja, nem tão específica, para poder repetir as classes, e nem tão genérica, para poder não precisar combinar classes.",
        "É sempre interessante inserir um espaçamento que seja proporcional ao tamanho da fonte, o que facilita a leitura do usuário.",
        "O alt da imagem, isto é, o texto alternativo que descreve de maneira sucinta o conteúdo visual expresso, é utilizado caso a imagem não seja carregada ou para pessoas que utilizam leitores de tela.",
        "Tanto o float:left quanto o float: right servem para que o elemento se destaque na tela, deixe de ocupar o espaço em que estava, para que os outros elementos possam se posicionar ao redor dele.",
        "Fontes preparadas para web: elas funcionam melhor em todos os navegadores, possuem comportamento parecido em todos os sistemas operacionais. Já uma fonte que não foi prepara para web não possui essas características, afinal seu foco é para materiais gráficos impressos.",
        "Usar fontes externas é uma alternativa muito funcional para termos mais opções, que deixam o nosso site mais bonito e exclusivo, e também padronizado em todos os navegadores.",
        "A tag <iframe> é específica para abrir 'janelas' em nosso site, com proporções definidas e endereço da informação. Podemos fazer o msemo com outros serviços que apresentem essa possibilidade de compartilhamento de informações, como vídeos, fotos de Instagram, páginas de Facebook e outros. Os acessos externos que complementam a página são, geralmente, feitos pela tag <iframe>.",
        "No CSS temos algo chamado pseudo-elementos, como :hover, :active, :visited, :required .... tais recursos são utilizados para marcar melhor nossos elementos e gerar um comportamento mais interessante em um site.",
        "O display quando configurado com inline-block, possui um detalhe que modifica o modo de exibição: ele interpreta no HTML todas as linhas do bloco de código, incluisive os espaços vazios entre a lista e a imagem. Portanto, quando utilizamos esse recurso, os elementos no HTML precisam estar colados, para que esse espaço não reflita na exibição da pagina.",
        "Os pseudo-elementos do CSS: after e before, criam espaço para que o CSS atue antes ou depois de um determinado conteúdo ... exemplo: .classe:before { content: '['; } adicionará um colchete aberto antes do conteúdo, já .classe:after { content:']' } adicionára um colchete fechado depois do conteúdo - exibição dos elementos dessa classe ficaria da seguinte maneira: [ conteúdo ]",
        "Os seletores avançados, uma forma específica de fazermos seleção de elementos de maneira mais rebuscada.",
        "Com a propriedade calc do CSS3 é possível realizar contas (operações aritméticas), como por exemplo: deixar um elemento de 100% de largura com o equivalente a um terço do elemento pai, menos 10px => 'width: calc( 33% - 10px )'",
        "A propriedade charset serve para que todos os usuários vejam o site com o dicionário correto",
        "O HTML é dividido em duas partes. A primeira delas é o head, e a segunda é o body. Vamos pensar o seguinte, traduzindo os nomes: head é cabeça e body é corpo. Se pensarmos em um documento, a cabeça são as informações que estamos passando para o navegador e o corpo são as informações que queremos exibir na página.",
        "Na estrutura correta do HTML, inserimos as informações que queremos passar para o navegador no head e as tags de conteúdo no body.",
        "Folha de estilo em cascata: como é uma folha de estilos em cascata, a cascata vai descendo, e o que eu faço no elemento pai reflete para o elemento filho.",
        "Só com um arquivo externo, e fazendo referência a esse arquivo, podemos usar o mesmo CSS em páginas diferentes.",
        "Podemos representar cores no CSS, com : Hexadecimal, RGB e com os nomes das cores ... por exemplo, podemos representar a cor vermelha com o nome red, o hexadecimal #FF0000 e o RGB rgb(255,0,0).",
        "A tag div é a tag específica para dividir o conteúdo. Ela não tem outra função além dessa.",
        "A class serve para replicarmos a aplicação do nosso CSS, sem precisar copiar e colá-lo em vários elementos. Aplicamos a classe para isso.",
        "A tag header é uma tag de conteúdo do HTML, e não uma tag de estrutura. Não confunda head com header.",
        "Em relação a propriedade opacidade: todos os elementos e todas as cores podem ter uma camada de opacidade."
    ],
    "HTTP": [
        "A arquitetura Cliente-Servidor",
        "Um protocolo é um conjunto de regras",
        "O HTTP foi feito para estabelecer regras de comunicação entre o modelo Cliente-Servidor que funciona na Web.",
        "Client-Server é um modelo de comunicação",
        "HTTP é um protocolo que define as regras de comunicação entre cliente e servidor na internet.",
        "O HTTP pode trafegar dados binários como imagens e dados textuais como HTML ou CSS!",
        "O HTTP não depende do navegador. Aliás, o tempo todo o nosso celular usa o HTTP para enviar requisições através de aplicativos!"
    ],
    "HTTPS": [
        "Por padrão, os dados são trafegados como texto puro na web. Apenas com HTTPS a Web é segura",
        "O protocolo HTTPS nada mais é do que o protocolo HTTP mais uma camada adicional de segurança, a TLS/SSL",
        "HTTP (Sem o S) => nossos dados são enviados em texto puro, ficando visível para qualquer um que consiga interceptar nossa conexão!",
        "A chave privada é utilizada para descriptografar os dados que foram criptografados com a chave pública, por isso ela é importante e deve ficar apenas em posse do servidor.",
        "O tipo de criptografia de chave pública/chave privada",
        "As chaves públicas estão no certificado, a chave privada fica apenas no servidor",
    ],
    "Certificado Digital": [ 
        "Um certificado digital prova uma identidade para um site, onde temos informações sobre o seu domínio e a data de expiração desse certificado.",
        "Além disso, o certificado ainda guarda a chave pública que é utilizada para criptografar (cifrar) os dados que são trafegados entre cliente e servidor.",
        "Todo certificado tem uma data validade e serve para provar a identidade entre o cliente e o servidor.",
        "É no certificado digital que encontramos a chave pública utilizada para criptografar os nossos dados."
    ],
    "Endereços":{
        "Dominio" : "o domínio é o nome do site na web e serve para facilitar a navegação do usuário, que acaba não precisando lembrar o IP de cada site.",
        "DNS" : "O DNS realiza a tradução do nome de um domínio para o endereço de IP. Existem vários servidores DNS no mundo e é fundamental para a nossa web o funcionamento deles.",
        "Recurso" : "recurso é aquilo que vem depois do domínio/",
        "Resumo" : [
            "URL são os endereços da Web",
            "Uma URL começa com o protocolo (por exemplo https://) seguido pelo domínio (www.alura.com.br)",
            "Depois do domínio pode vir a porta, se não for definida é utilizada a porta padrão desse protocolo",
            "Após o domínio:porta, é especificado o caminho para um recurso (/course/introducao-html-css)",
            "Um recurso é algo concreto na aplicação que queremos acessar"
        ]
    },
    "Requisições": [
        "Uma requisição sempre deve ser enviada com todas as informações necessárias, o que faz uma requisição ser sempre independente das demais.",
        "É importante lembrarmos que a comunicação sempre começa com o cliente: é ele quem pede as informações. O servidor responde apenas o que foi requisitado e nunca inicia a comunicação.",
        "HTTP é stateless, não mantém informações entre requisições",
        "As plataformas de desenvolvimento usam sessões para guardar informações entre requisições"
    ],
    "Sessão HTTP" : "É o tempo que o cliente utiliza um web app.",
    "Cookie Web": "Um cookie é um pequeno arquivo de texto, normalmente criado pela aplicação web, para guardar algumas informações sobre usuário no navegador.",
    "Status Code do HTTP" : {
        "1xx": "Informações",
        "2xx": "Sucesso",
        "3xx": "Redirecionamento",
        "4xx": "Erro de Cliente",
        "5xx": "Erro do Servidor"
    },
    "Metodos HTTP" : {
        "GET" :"Quando passamos os parâmetros da requisição na URL, estamos fazendo uso do método GET. O que é super útil quando precisamos repetir a requisição com os mesmos parâmetros",
        "POST" : "O método POST é utilizado quando queremos criar um recurso. Quando usamos POST, os dados vão no corpo da requisição e não na URI.",
        "PUT" : "Requisita que um recurso seja 'guardado' na URI fornecida. Se o recurso já existir, ele deve ser atualizado. Se não existir, pode ser criado.",
        "DELETE" : "Exclui o recurso especificado.",
        "TRACE" : "Devolve a mesma requisição que for enviada veja se houve mudança e/ou adições feitas por servidores intermediários.",
        "OPTIONS" : "Retorna os métodos HTTP suportados pelo servidor para a URL especificada.",
        "PATCH" : "Serve para atualizar partes de um recurso, e não o recurso todo.",
        "CONNECT" : "Converte a requisição de conexão para um túnel TCP/IP transparente, geralmente para facilitar a comunicação criptografada com SSL (HTTPS) através de um proxy HTTP não criptografado.",
        "HEAD" : "Retorna somente os cabeçalhos de uma resposta."
    },
    "Web Services": [
        "Um Web Service disponibiliza uma funcionalidade na web, através do protocolo HTTP.",
        "As funcionalidades variam muito e dependem muito da empresa e do negócio dela, mas por exemplo, na Alura temos um Web Service que traz todas as informações de um curso (nome, capítulos, exercícios, etc)",
        "O importante é que sempre usamos o protocolo HTTP. A grande diferença de um Web Service é que os dados não vem no formato HTML, e sim em algum formato independente da visualização, como XML ou JSON.",
        "Uma requisição web tem 3 tipos de componentes importantes: recursos (URI), operações (GET, POST, DELETE, ...) e representação de dados(XML, JSON, ...). Esses 3 componentes em conjuntos seguindo algumas práticas são a base para o modelo arquitetural REST(Representational State Transfer)"
    ],
    "Serviços Web REST" : [
        "REST é um padrão arquitetural para comunicações entre aplicações",
        "Ele aproveita a estrutura do HTTP",
        "Recursos são definidos via URI",
        "Operações com métodos HTTP(GET/POST/PUT/DELETE)",
        "Cabeçalhos(Accept/Content-Type) são usados para especificar as representações(JSON,XML,...)"
    ],
    "HTTP/2" : {
        "Motivo da Atualiação" : [
            "O protocolo que estamos trabalhando até agora foi especificado na década de 90 e de lá até hoje muitas alterações foram feitas até na forma como usamos a internet.",
            "Com a chegada do mundo mobile novas preocupações apareceram e otimizações são cada vez mais necessárias para uma boa performance.",
            "A nova versão é batizada de HTTP/2 e tem como página principal de documentação e referência essa: https://http2.github.io/."
        ],
        "Melhorias com a nova versão" : [
            "No HTTP 1.1, para melhorar a performance, habilitamos o GZIP no servidor para comprimir os dados das respostas. É uma excelente prática, mas que precisa ser habilitada explicitamente. No HTTP/2, o GZIP é padrão e obrigatório.",
            "Os cabeçalhos no HTTP 1.1 não são comprimidos e ainda viajam em texto puro. Já na nova versão, os headers passam a ser binários. Além de binários eles são comprimidos usando um algoritmo chamado HPACK. Isso diminui bastante o volume de dados trafegados nos headers.",
            "Além de todas essas otimizações para melhorar a performance ainda houve uma preocupação com segurança exigindo TLS por padrão também.",
            "Com o HTTP/2 o uso de HTTPS acaba sendo obrigatório, e esta é uma das grandes vantagens do uso desta nova atualização do protocolo.",
            "O HTTP/2 possui diversas tecnologias de compactação de sua requisição. Isto acaba sendo muito útil para clientes móveis, visto que a maioria das redes mobile ainda não são de grande qualidade.",
            "A tecnologia HPACK é especialista em comprimir os Headers da requisições/respostas HTTP, deixando as mais leves."    
        ],
        "Cabeçalhos Diferentes" : [
            "O HTTP é stateless, ou seja, ele não guarda informações das requisições passadas. E isso continua valendo, mas no caso dos cabeçalhos, existe um ambiente que guarda estado. Isso é conhecido como Headers Stateful.",
            "Os Headers Stateful permitem que apenas os cabeçalhos que mudem sejam enviados a cada requisição, economizando muita banda que seriam cabeçalhos repetidos."
        ],
        "Server-Push" :  "O servidor pode empurrar para o clientes certos recursos antes mesmo de serem solicitados, pois ele consegue analisar o HTML e ver o que mais é preciso para carregar a página fazendo com que não seja necessário gastar tempo pedindo todos os outros recursos.",
        "Multiplexação" : [
            "Requisições e respostas vão chegando a todo tempo. É totalmente paralelo. A mesma coisa acontece com o servidor, não precisamos esperar uma resposta para enviar outra. Se já está pronta para ser enviada, ele já envia diretamente.",
            "Esse conceito que surgiu no HTTP2 é chamado de Multiplexing e traz uma performance bastante relevante para o nosso HTTP."
        ],
        "Resumo": [
            "O HTTP2 atua sobre o que já conhecemos do HTTP. Ou seja, ele não muda nada em relação ao que já conhecemos de HTTP. E que todo o seu conteúdo é usado no HTTP2 de forma bastante simples.",
            "Hoje, o que o HTTP2 especifica é mais a nível de servidor. E acaba que nós desenvolvedores não atuamos tanto nesse nível. Fica mais na outra ponta, que é quem vai produzir servidores e tudo mais, seguir esse novo protocolo.",
            "O HTTP2 é nada mais que o HTTP com algumas melhorias, até porque o HTTP1 estava bastante desatualizado em relação ao que o mercado já vinha sofrendo.",
            "Os headers são binários e eles são comprimidos com algoritmos chamados de HPACK.",
            "O HTTP2 habilita o GZIP como padrão na resposta, logo, esses dados vêm zipado. Coisa que tínhamos que configurar manualmente na versão anterior, ou seja, HTTP1.1.",
            "No HTTP2, as requisições e respostas podem ser paralelas. Não precisamos ficar esperando que uma requisição termine pra fazer a próxima. Temos uma otimização maior.",
            "Os cabeçalhos guardam status. Quando enviamos uma requisição, a próxima, para o mesmo domínio, não precisa enviar os mesmo dados que já foram trafegados na última. Conclui-se que no HTTP2 isso é evitado, ou seja, menos informação enviada, menos dados que enviamos, menos banda que usamos do usuário, mais feliz ele fica.",
            "O HTTP2 especifica o famoso Server-push, que é o ato do servidor enviar dados sem que o browser tenha pedido, que foi o que aconteceu lá no index.html. O HTTP2 pode enviar dados diretamente para o browser sem ficar esperando uma requisição. Assim, ele dá um passo além."
        ]
    },
    "HTML" : {
        "Conceitos" : [
            "Uma página web tem o seu conteúdo com HTML (hyper text markup language), de modo que nós usamos o HTML para fazer marcação de texto.",
            "A linguagem HTML serve para marcar conteúdo, ou seja, especificar o que cada letra, palavra e frase significa. ",
            "Usamos ela para criar páginas pois, assim, o navegador e outras ferramentas que trabalham na Internet conseguem analisar e processar nosso conteúdo, apresentando-o de forma adequada para os usuários.",
            "A codificação UTF-8 abrange praticamente todos os sistemas de escritas usadas pelo mundo todo. Além disso, todos os computadores vêm com suporte a essa codificação. Assim, se queremos que nossas páginas sejam acessíveis por todos, a codificação UTF-8 é a melhor opção."
        ],
        "<!DOCTYPE>" : [
            "A instrução DOCTYPE serve para indicar qual linguagem estamos usando no nosso documento e em qual versão. Por isso é essencial para que o computador processe corretamente nosso arquivo.",
            "Atualmente, usamos a instrução <!DOCTYPE html> para indicar que usamos a última versão do HTML.",
            "Antigamente, era necessário usar <!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01//EN' 'http://www.w3.org/TR/html4/strict.dtd'>, por exemplo, para indicar que estávamos usando a versão 4 do HTML na sua variante estrita."
        ],
        "Tag" : {
            "Conceito": "Para marcarmos esse texto, precisamos usar o que são chamadas de “tags”. O formato de uma tag é um sinal de < um nome qualquer e um sinal de >. Isso é o que fecha uma tag. É o conteúdo que vamos ter para uma tag.",
            "Diferença entre tags": "As tags são semânticas e para cada uma delas temos um significado e um resultado diferente.",
            "DOCTYPE": "A tag DOCTYPE serve para informar ao navegador qual versão do HTML estamos usando.",
            "Tags":{
                "<title>" : "Serve para passar para o navegador qual o título da aba/janela em que a página será exibida.",
                "<h1>" : "Serve para mostrar para o usuário qual o título principal do conteúdo da página.",
                "<meta>" : "Serve para indicar a codificação de texto que está sendo utilizado e para o navegador ler e interpretar examente da forma que queremos.",
                "<head>" : "Serve para conter as informações da páginas, para o navegador entender como será a página, ou seja, trata-se de Metadainformações",
                "<nav>" : "Indicar que uma determinada região da página contém links para navegar para outras partes do site"
            }
        },
        "Atributos": {
            "alt": [ 
                "Para usuários com deficiência visual e ferramentas de busca saberem do que se trata a imagem",
                "Apesar de alguns navegadores poderem mostrar o texto do atributo alt quando se coloca o mouse em cima da imagem, a principal função desse atributo é tornar a página mais acessível para usuários com deficiência visual e ferramentas de busca.",
                "Deficientes visuais muitas vezes utilizam programas que leem o conteúdo da tela para eles. Esses programas, quando encontram uma tag <img>, podem ler o conteúdo do atributo alt para seus usuários.",
                "Ferramentas de busca utilizam o texto do atributo alt para descobrir do que se trata uma determinada imagem e, assim, mostrá-la em buscas com termos relacionados ao tema da imagem."
            ]
        },
        "Dicas":{
            "Seleção": [
                "Apesar de podermos usar apenas as tags e a estrutura que elas formam na página para selecionar elementos, essa forma de seleção é frágil, uma alteração em um elemento pode impactar em outro. A seleção por tags e estrutura é muito genérica.",
                "Para garantirmos que estamos selecionando apenas os elementos desejados, o ideal é usar classes sempre que possível."            
            ],
            "Nome das Classes": [
                "Nomes próprios remetem ao conteúdo desses elementos. Assim, esses nomes só perderão o sentido se mudarmos o conteúdo da página, o que dificilmente acontece.",
                "Se usarmos os nomes direita e esquerda, acabaremos com nomes de classes muito genéricos que possivelmente perderão o sentido quando resolvermos alterar algum detalhe no visual da página.",
                "A única vantagem de usar nomes genéricos é de serem bem reaproveitáveis. Podemos usá-los em quaisquer elementos que queiramos fazer flutuar à direita ou à esquerda. Porém, nosso HTML começará a ter código relativo à visualização, ou seja, começaremos a misturar conteúdo e visualização."
            ]
        },
        "Resumo": [
            "Com a tag DOCTYPE, definimos qual versão do HTML estamos utilizando.",
            "A tag <html>, que marca o conteúdo a ser renderizado no navegador e dentro desta tag, podemos definir a linguagem da página, através da propriedade lang.",
            "Passamos as informações do encoding da nossa página para o navegador, através da tag <meta> e da propriedade charset.",
            "Definimos o título de uma página, através da tag <title>.",
            "Separamos as informações que estão sendo passadas para o navegador, utilizando a tag <head>."
        ]
    },
    "CSS":{
        "Definição": [
            "Enquanto o HTML é usado para estruturar conteúdos da página, o CSS para formatar conteúdos estruturados.",
            "CSS é uma linguagem para estilos que define o layout de documentos HTML. Por exemplo, CSS controla fontes, cores, margens, linhas, alturas, larguras, imagens de fundo, posicionamentos e muito mais.",
            "O CSS é a forma como mexemos em cada um dos elementos granularmente, em cada um dos pontos desses elementos para podermos apresentar o nosso site do modo como quisermos.",
            "Enquanto o HTML é usado para estruturar conteúdos da página, o CSS serve para formatar os conteúdos estruturados.",
            "CSS é uma linguagem para estilos que define o layout de documentos HTML. Por exemplo, CSS controla fontes, cores, margens, linhas, alturas, larguras, imagens de fundo, posicionamentos e muito mais."
        ],
        "Fontes":[
            "A medida 'px' é uma unidade de medida absoluta. Para termos um CSS mais flexível, é interessante usar medidas relativas, como em e a medida de porcentagem.",
            "A medida 'em' toma como base o tamanho de fonte do elemento no qual for usada.",
            "A medida 'rem' toma como base o tamanho de fonte do elemento html ou, se não houver tamanho de fonte definido neste elemento, o tamanho de fonte padrão do navegador.",
            "O tamanho 'rem' possui um valor único para a página inteira, já a medida em varia de acordo com o elemento em que é utilizada. É interessante usarmos 'em' quando queremos que a mudança de tamanho se propague pela página",
            "A medida 'ch' toma como base A largura do caractere '0' (zero).",
            "A medida '%' porcentagem dependendo do contexto utilizado, pode ser à largura, à altura ou ao tamanho de fonte do pai do elemento."
        ],
        "Seletores Avançados":{
            "Seletor >": "Para acessar os filhos de determinado elemento. Por exemplo, para acessar todos os p dentro de main: main > p { }",
            "Seletor +": "Para acessar o primeiro irmão de determinado elemento. Por exemplo, para acessar o primeiro p após um img: img + p { }",
            "Seletor ~": "Para acessar todos os irmãos de determinado elemento. Por exemplo, para acessar todos os p após um img: img ~ p { }",
            "Seletor not": "Para acessar os elementos, exceto algum. Por exemplo, para acessar todos os p dentro de main, exceto o p que tem id missao: main p:not(#missao) { }"
        },
        "Propriedades":{
            "Box-Sizing":[
                "Quando aplicamos o valor border-box para a propriedade box-sizing nos elementos <blockquote>, vemos que o tamanho deles aparentemente diminui. Isso acontece porque estamos mudando a forma como o navegador mede a largura dos elementos.",
                "Por padrão, o navegador mede a largura ignorando padding e bordas. No momento em que colocamos border-box, dizemos ao navegador que ele deve considerar padding e bordas nesse cálculo. Então o elemento diminui pois agora os 250 pixels que definimos de largura incluem os paddings e bordas do elemento."
            ],
            "Display" : [
                "Display é a propriedade mais importante do CSS para controlar o layout. Cada elemento tem um valor padrão para o display dependendo de seu tipo. ",
                "O valor padrão na maioria dos elementos é normalmente block ou inline. Um elemento com valor block é chamado de elemento de nível de bloco ou apenas elemento de bloco. Um elemento com valor inline é sempre chamado de elemento de linha.",
                "O valor inline-block para a propriedade display surgiu para podermos definir altura e largura em elementos inline. Fora isso, ambos os elementos podem ter um padding definido, ambos ficam em linha e ambos são suportados por todos os navegadores modernos."
            ],
            "Transform-Style" : "A declaração transform-style: preserve-3d faz com que o navegador preserve as transformações 3D dos filhos de um elemento na hora de calcular a perspectiva."
        },        
        "Reset CSS" : [
            "Devemos usar um reset nos nossos projetos para eliminar diferenças de layout entre navegadores e bugs específicos de alguns navegadores. Com isso, ganhamos uma base sólida para desenvolvermos nosso site. Ou seja, todas as alternativas listam benefícios de se usar um reset.",
            "Alguns efeitos visíveis da importação do reset.css são: Todos os elementos ficam com a letra do mesmo tamanho - Alguns espaçamentos desaparecem - Negritos e itálicos desaparecem - As marcações de lista (bolinhas) no menu de navegação desaparecem"
        ]
    },
    "JavaScript": {
        "JS de padrões a uma linguagem Funcional":{
            "Problemas ao levantar o servidor":[
                "Em um sistema operacional Linux, não é raro o binário do node se chamar node.js. Nesse sentido, deve ser utilizado o comando nodejs server.",
                "A plataforma Node.js não foi instalada, desta maneira, o binário node não estará disponível através do terminal/prompt de comando.",
                "A pasta acessada através do terminal/prompt de comando não é a pasta project, logo, a execução do comando node server não encontrará o arquivo server.js. Para resolver, basta entrar na pasta correta e repetir o último comando."
            ]
        },
        "JS Alura Novo Curso":{
            "Primeiros Passos":{
                "Introdução":[
                    "Antigamente para começar com o javascript em tempo real necessitavamos de um navegador e através da ferramenta de desenvolvedor conseguiamos realizar operações necessárias em tempo de execução, hoje o node.js facilita esse processo, sem a necessidade de um navegador.",
                    "Podemos salvar valores dentro de variáveis, eses valores ficam salvos dentro da memória do computador e podem ser acessados em outros lugares do nosso código.",
                    "Quando colocamos algo entre aspas o interpretador do JS entende aquilo como sendo um texto literal.",
                    "JS é case sensitive, linguagem sensivel a maisculo e minusculo, diferencias letras",
                    "A falta de padronização entre os nomes das variáveis pode gerar muitos problemas no futuro da aplicação e os programadores não saberão quando usar cada tipo de nomenclatura;",
                    "Sempre que declaramos uma variável estamos reservando um espaço de memória no computador.",
                    "Listas sempre começam a contagem de elementos a partir do 0 então o index 2 mostra o terceiro elemento da lista.",
                    "Ao colocarmos um break dentro do laço estamos falando para o interpretador que quando ele chegar nessa linha ele deve sair do laço independentemente de outras condições."
                ]
            },
            "Orientação a Objetos":[
                "A criação de uma classe pode ser feita através da palavra-chave class e com isso definimos quais atributos queremos que essa classe possua.",
                "Classes definem uma forma de organizarmos uma série de informações repetidas no nosso código e por isso devemos usar elas quando temos código que se repete e que faz parte de um contexto coeso.",
                "Função e método são termos sinônimos e que nós ajudam a criar um vocabulário mais rico dentro do nosso sistema",
                "Um método define o comportamento ou a maneira de fazer algo, e pode receber qualquer quantidade de parâmetros.",
                "Por padrão no JS utilizamos o '_' para indicar que um atributo é privado e não deveria ser alterado,  e apesar de ainda ser possível alterar essa propriedade isso é considerado uma má prática e estamos quebrando o encapsulamento da classe.",
                "Atualmente no Js nenhum atributo ou método é realmente privado, é uma linguagem de escopo aberto e por isso é possível visualizar qualquer atributo ou propriedade de nossa classe.",
                "A organização de um projeto de programação é algo muito importante para que conforme o sistema crescer encontrarmos mais facilmente as classes e lugares que queremos alterar.",
                "Criamos módulos para compartilhar código entre os diferentes arquivos do meu sistema, ajudando na organização dele.",
                "Ao criarmos um programa em qualquer linguagem de programação precisamos utilizar variáveis para guarda valores durante a execução de nossos programas, e cada uma dessas variáveis é armazenada em um lugar da memória do computador.",
                "Dependendo dos valores que uma variável guarda o JS trata ela de forma diferente, passando ela como uma cópia de seu valor ou como uma referência ao espaço de memória onde ela está guardada.",
                "Tipos primitivos são sempre passados como um valor, enquanto que tipos não primitivos sempre são passados por referência.",
                "Tipos primitivos são os valores mais simples que a linguagem consegue trabalhar e geralmente são implementados no nível mais baixo da linguagem, isso significa que eles não são representados como um objeto e por isso não possuem métodos ou atributos.",
                "Um tipo primitivo é simplesmente um valor em sua forma mais simples de representação, e les também são imutáveis, uma vez declarados seu valor nunca muda.",
                "Tipos Primitivos: String (texto); Number (número); Boolean; Null; undefined; Symbol.",
                "Qualquer outro tipo que encontramos em nossas aplicações, como Objetos, Arrays, etc... não são tipos primitivos e por isso o JS trata eles de forma diferente.",
                "Variáveis que não são primitivas são mutáveis por natureza e podem conter uma estrutura de dados grande e complexa o que tornaria a operação de cópia desses valores ineficiente.",
                "Quando criamos um objeto dentro do JS ele reserva um espaço de memória no local que chamamos de Heap, ao fazer isso o que ele guarda na variável que criamos não é o valor do Objeto que criamos e sim o endereço de memória onde os valores estão salvos.",
                "Ao passarmos uma variável que 'guarda' um objeto para um método dentro do JS o que estamos passando é apenas o endereço de memória que aquela função deve usar para acessar os valores do objeto.",
                "Como as variáveis não primitivas apenas guardam um endereço para o espaço de memória falamos que elas guardam uma referência para onde aquele objeto está guardado e por isso falamos que são um 'tipo de referência' enquanto que os primitivos são 'um tipo de valor'.",
                "Usando assessores do tipo set podemos alterar a regra de como um atributo pode ou não ser modificado sem precisar alterar isso em diversos pontos do código, assim se qualquer regra de atribuição mudar só precisamos modificar um único lugar.",
                "Usar assessores do tipo set é uma boa prática para garantirmos que a atribuição de propriedades está sempre segura, chamamos essa ideia de proteger atributos de nossas classes de encapsulamento e devemos sempre manter o máximo de encapsulamento possível."
            ],
            "Interfaces e Herança":[
                "A sintaxe do JavaScript para herdarmos de uma classe ocorre através da palavra extends: 'class Carro extends Veiculo', dessa forma a classe carro herda as propriedades e métodos da classe Veículo",
                " Com a herança podemos herdar classes que herdam de outras classes. E conforme essa cadeia cresce a complexidade do código tbm cresce. Por isso é considerada uma má prática criarmos árvores de herança muito profundas.",
                "Em outras linguagens linguagens o tema abstrato e interface contém uma palavra reservada para sua aplicabilidade.",
                "No JavaScript a aplicabilidade de abstrato e interface,  ocorre através da proteção da Classe e o Método de serem utilizado diretamente, lançando um erro no construtor da Classe que não deve ser inicializada, ou no método que precisa ser sobrescrito.",
                "Ao desenvolvermos um sistema as classes mais abstratas e genéricas nos ajudam a delimitar os contextos de negócio que estamos trabalhando, mas as classes concretas e especificas nos dão informações mais granulares. Sempre é bom ter a quantidade certa de cada tipo de classe.",
                "Classes abstratas são pensadas de forma que elas apenas possam ser herdadas por outras, elas nos ajudam a criar abstrações no código e a compartilhar código entre outras classes.",
                "Métodos abstratos devem ser sobrescritos pelas classes filhas, dessa forma não faz sentido termos um método abstrato fora de uma classe abstrata. Tome esse cuidado quando for criar seu código.",
                "O JS não é uma linguagem fortemente tipada e por isso não depende apenas dos tipos pré-definidos mas sim se eles possuem ou não as propriedades que queremos utilizar.",
                "Através do polimorfismo o JS consegue tratar diferentes objetos de maneiras semelhantes e por isso conseguimos autenticar diferentes tipos de objetos em nosso sistema."
            ]
        },
        "Introdução":[
            "Por que estudar Javascript? É uma linguagem que, além de ser a padrão nos navegadores atuais, vem expandindo para outras áreas como servidores, banco de dados e até plataformas de Internet of Things.",
            "Tudo que declaramos dentro da tag <script> é interpretado como Javascript quando o navegador passar por ali.",
            "O console do desenvolvedor é uma ferramenta muito poderosa com ele conseguimos rapidamente ser notificados de possíveis erros em nosso código, podemos executar funções, observar a saída de algumas funções e executar pequenos testes das funcionalidades do Javascript de modo rápido.",
            "O document é uma variável muito importante do Javascript. Ela contém o DOM ou Document Object Model, que é como o navegador enxerga o HTML utilizado por ele para renderizar a página.",
            "O navegador, ao ler o seu arquivo HTML, cria uma cópia em memória daquele HTML, que é o que nós chamamos de DOM, e a partir dessa cópia ele vai desenhando a sua página, colocando as tags e aplicando os estilos.",
            "O DOM é uma representação em memória do HTML do seu arquivo, que o navegador usa para desenhar a página, e a variável document é quem contêm o DOM."
        ],
        "Funcões":[
            "As funções anônimas, são funções que não tem nome e só são chamadas no contexto aonde foram declaradas. Elas são muito usadas em conjunto com a função addEventListener(), onde normalmente a ação que desejamos chamar só deve ser chamada naquele local.",
            "Quando desejamos pegar apenas parte do HTML, devemos utilizar a função querySelector(). A função querySelector faz a busca através de seletores CSS para trazer o HTML que você está interessado.",
            "O Javascript possuí dois tipos de funções, as funções anônimas e as funções nomeadas.",
            "As funções nomeadas, como o próprio nome diz, são as funções que levam um nome em sua criação e que podem ser invocadas posteriormente.",
            "A função responsável por criar elementos no Javascript é a createElement().Com ela passamos o nome da tag que queremos criar e ela nos retorna um objeto HTML que pode ser alterado com as propriedades do Javascript, como a .textContent e a .classList.",
            "A função querySelector na própria <tr> *, afinal a função querySelector() é especialista *em buscar, seja na página inteira quando utilizamos-a buscando no document (document.querySelector) ou quando queremos fazer uma busca em elemento específico que foi pré selecionado",
            "Podemos controlar o número de casas decimais exibidas através da função .toFixed().",
            "Quando selecionamos um elemento com as funções de querySelector, elas nos devolvem um objeto que tem algumas propriedades especiais, que falam sobre as características do HTML selecionado. Uma dessas propriedades é a .classList, que como o nome indica nos mostras classes que aquele HTML tem.",
            
            "Todo array possui a função forEach. Passamos para ela uma função por parâmetro, e nessa função fazemos o que quisermos para cada item do array. O item do array é recebido por parâmetro na função interna."
        ],
        "Propriedades":{
            "innerHTML": [
                "Podemos obter o conteúdo HTML (HTML interno) de um elemento, basta acessalo através da notação ponto ou setarmos através de atribuição com o sinal de igual.",
                "Quando utilizada para obter o HTML interno de um elemento, seu retorno é uma String, que representa todo o conteúdo HTML do próprio elemento.",
                "Com a propriedade innerHTML, podemos editar o conteúdo HTML (HTML interno) de um elemento."
            ],
            "style":[
                "Para alterar o estilo de um elemento devemos acessar a propriedade style, seguido do estilo que será modificado.",
                "Quando o nome do estilo possui duas palavras no CSS - como é o caso de background-color - devemos representá-lo com o estilo camelCase."
            ],
            "classList":[
                "Quando queremos manipular as classes de um elemento, devemos acessar sua propriedade .classList, e se queremos adicionar uma classe, iremos utilizar a função .add()"
            ]
        },
        "Eventos":[
            "Os eventos são basicamente um conjunto de ações que são realizadas em um determinado elemento da página web, seja ele um texto, uma imagem, ou uma div, por exemplo. Muitas das interações do usuário que está visitando sua página com o conteúdo do seu site podem ser consideradas eventos.",            
            "Todo evento disparado em JavaScript possui um contexto que é acessível através da função executada quando o evento for disparado.",
            "O comportamento padrão de um form, quando clicamos em um button ou em um input submit, que está dentro dele, é enviar os dados e recarregar a página. Para evitarmos este comportamento, devemos chamar a função do Javascript que previne o comportamento padrão de certos elementos: event.preventDefault.",
            "Para cada evento existente no JavaScript, há a propriedade on + nomeDoEvent. A função que desejamos executar é atribuída direto na propriedade. No entanto, essa forma tem uma limitação, como estamos guardando a função em uma propriedade, se adicionarmos outra função, essa sobrescreverá a anterior.",
            "Fonte para os diversos tipos de eventos: https://developer.mozilla.org/en-US/docs/Web/Events"
        ],
        "Objeto":[
            "Utilizamos objetos no Javascript como na maioria das linguagens de programação orientadas , aonde os objetos podemos compará-los com objetos da vida real. Um objeto é uma entidade independente, com propriedades e tipos.",
            "Para declaramos um objeto, utilizamos a sintaxe com {}. Só que de nada nos serve um objeto vazio, então podemos dar características a este objeto através de suas propriedades, que são separadas por um : do seu valor e utilizamos uma vírgula ao final de cada propriedade para separá-la da próxima.",
            "O objeto implícito this é uma referência para o elemento do DOM que esta recebendo o evento, logo, sua natureza é dinâmica, ou seja, se clicarmos no primeiro elemento da lista o this será o primeiro elemento, se clicarmos no último ele será o último. É a natureza dinâmica do this que nos permite utilizar a mesma função em diferentes contextos."
        ],
        "Requisições": [
            "O objeto XMLHttpRequest é quem é responsável por fazer requisições HTTP assíncronas com Javascript. Apesar de ter o XML no nome hoje em dia este objeto pode trafegar diversos outros tipos de dados além do XML, este nome só se manteve devido a um legado histórico.",
            "Dado que temos um XMLHttpRequest, precisamos configurar nossa requisição para dizer para qual servidor queremos enviá-la e também qual método HTTP devemos usar. Fazemos isto através do método .open() , passando o método e a url.",
            "O XMLHtttpRequest deve ser configurado anteriormente com a função .open(), que ele pode trafegar diversos tipos de dados e não somente o XML ( ele tem esse nome graças a um vestígio histórico), e a requisição só é enviada mesmo após chamarmos o método .send()."
        ],
        "Boas Práticas":{
            "Eventos no mesmo Elemento" :  "È uma boa prática é trabalhar com addEventListener() mesmo que você só queira adicionar um único evento. Porque mais tarde, se outro desenvolvedor quiser adicionar outro evento para o mesmo elemento, não corremos o risco de substituir a função já associada por outra.",
            "Quebrar uma grande função complexa": [
                "Dar manutenção ao código fica muito mais fácil, visto que agora podemos examinar vários pequenos blocos , que são muito mais fáceis de compreender do que um grande bloco de texto",
                "Ao quebrar uma grande função, também estamos deixando ela com menos responsabilidades, com a meta de atingir o ideal de que cada função tenha apenas uma única responsabilidade.",
                "O código também fica muito mais fácil de testar, pois se temos diversas funções pequenas conseguimos ir testando uma a uma em busca de erros ou bugs do código.",
                "E por último, a legibilidade do código aumenta muito, pois dando nomes semânticos a cada uma das funções menores conseguimos deixar bem claro o que aquela parte do código deve fazer e facilita o entendimento do todo como um geral."
            ]

        },
        "Agulha no Palheiro":{
            "Muitas funções em um único arquivo JavaScript":[
                "A vantagem de declararmos todas as funções em um único arquivo é favorecer sua importação em nossas páginas, pois se fossem vários arquivos precisaríamos importar um a um.",
                "Uma desvantagem dessa abordagem é que fica mais complicado de um desenvolvedor trabalhar com o mesmo arquivo ao mesmo tempo.",
                "Se o desenvolvedor A precisa alterar a função X e o desenvolvedor B a função Y o risco do trabalho ser perdido quando o arquivo for atualizado é grande. Mesmo com ferramentas de versionamento de código o desenvolvedor terá que resolver conflitos que são bastantes comuns nessa abordagem.",
                "Se das 100 funções declaradas no arquivo apenas um necessitar manutenção, caso o desenvolvedor cometa algum erro de sintaxe, isso comprometerá todas as funções, pois nada será mais carregado. Sendo assim, as chances de introduzir problemas quando for resolver um são bem maiores.",
                "Quando temos arquivos separados, cada arquivo possui uma responsabilidade e uma ou mais funções que fazem sentido naquela responsabilidade. Por exemplo, podemos ter um arquivo chamado conversao.js e nele termos funções que convertem valores monetários com R$ para números, e números para o formato com R$.",
                "Se separamos outras funcionalidades por arquivo, quando alterarmos esses arquivos, se cometermos algum erro, apenas uma ou mais funções do arquivo serão comprometidas e o restante dos outros arquivos poderão ser carregados sem problema (a não ser que um arquivo dependa do outro).",
                "Assim como na vida real geralmente guardamos peças de roupas por categorizações que julgamos satisfazerem nossa organização, separar arquivos por grupos comuns também nos ajuda a encontrar e dar manutenção em nosso código."
            ]
        },
        "Browser e Padrões de Projeto":{
            "MVC":[
                "É interessante separarmos os dados da apresentação visual, desta forma conseguiríamos adicionar ao primeiro as regras de negócio, com os dados separados, poderemos também modificar a utilização dos dados (visualização).",
                "Um dos modelos utilizados na web que melhor se adapta aos projetos é o modelo MVC (Model-View-Controller), declarando classes que representam nossos modelos (dados) e classes que representam nossas views (tela). As ações do usuário serão interceptadas por uma Controller, que irá alterar os dados, o Model, enquanto a View será atualizada para exibir o estado mais atual, desta forma, as regras de negócio não estarão espalhadas pela View, elas estarão no modelo.",
                "O padrão MVC permite que alterações de layout na view não acarretem alterações no modelo.",
                "M é o modelo, uma abstração do mundo real, os dados da aplicação e suas regras de negócio - por exemplo: um analista de mercado que quer entender como o mercado funciona, criará um modelo em que ele possa dar entradas e executar determinado procedimentos para tentar prever como é o seu funcionamento.",
                "O C é o controller, aquele que disponibiliza um modelo para a view, é quem recebe as ações do usuário e que sabe interagir com o modelo, como o modelo é independente da view, esta precisa ser renderizada para que reflita as alterações no modelo, em suma, o controller é a ponte de ligação entre a view e o modelo.",
                "A View é a representação do modelo em alguma tecnologia, por exemplo, HTML,  apresenta um modelo em uma tabela, em um formulário ou em parágrafos, e o padrão MVC permite que qualquer alteração na view não interfira com o modelo."
            ],
            "Orientação a Objetos":[
                "JavaScript é uma linguagem multiparadigma, podemos programar proceduralmente, funcionalmente e orientado a objetos.",
                "Para criarmos uma classe, usamos a palavra reservada class seguida do nome da classe. Por convenção, nomes de classe começam em letra maiúscula. Curiosamente essa convenção se chama pascal case.",
                "Para definirmos atributos de instância de uma classe, precisamos adicionar em sua definição um constructor. É através do construtor que adicionamos na variável implícita this as propriedades que desejamos que toda instância da classe tenha.",
                "Apesar do termo atributo ser muito utilizado no mundo da orientação a objetos, no mundo JavaScript o termo propriedade é mais usado.",
                "O operador new é o responsável pela inicialização do this de cada objeto criado, cada objeto terá seu this com suas propriedades.",
                "O operador new é bastante importante por ser o responsável em criar um novo this para cada instância da classe.",
                "O this é uma variável implícita que sempre apontará para a instância que está executando a operação naquele momento.",
                "A linguagem JavaScript - até a atual data - não nos permite usar modificadores de acesso, não podemos dizer que uma propriedade seja apenas leitura (ou gravação), o que podemos é utilizar a convenção de que nos atributos das propriedades de uma classe que não pode ser modificada, usaremos um underline (_).",
                "O '_' em uma propriedade é uma convenção que informará ao programador que as propriedades que contenham _ só poderão ser acessadas pelos próprios métodos da classe. Isto significa, que mesmo podendo imprimir a propriedade _quantidade com outro valor, não deveríamos mais poder acessá-la.",
                "CURIOSIDADE: a linguagem TypeScript da Microsoft permite definir atributos privados com o modificador private. TypeScript nada mais é do que um superset do ES2015+ com a adição de novos recursos, inclusive aquele que define atributos privados.",
                "Se usamos a convenção de utilizar o prefixo, como faremos para imprimir a classe? Se não podemos acessá-la, como podemos fazer isso? Para isto, criou-se métodos chamados acessadores: get e set.",
                "Os métodos da classe poderão acessar os atributos que levam _. No entanto, de acordo com a nossa convenção, alguém fora da classe não poderá fazer o mesmo.",
                "Object.freeze é uma maneira de impedir que as propriedades de um objeto sejam alteradas, congelando a sua instancia, assim todas as propriedades deste objeto não sofrem alterações.",
                "Object.freeze é shallow (raso), ou seja, ele ficará na superfície, quando congelamos um valor, não podemos alterá-lo ... porém, se chamarmos algum método que altere propriedades de um objeto que também é propriedade de um objeto congelado, conseguimos altera-lá, pois não é feito o que chamamos de deep freeze (quando trabalhamos com um objeto e dentro dele temos outras propriedades, estas não ficarão congeladas).",
                "Declarações com var possuem escopo de função ou global, variáveis declaradas com let tem escopo de bloco e o JavaScript lançará um erro se a mesma for declarada mais de uma vez.",
                "Podemos ainda deixar o nosso código menos 'verboso', usando uma forma diferente de declarar função - utilizada a partir da versão ES2015: falamos das arrow functions. O termo arrow traduzido para o português significa flecha. Com estas funções, podemos eliminar a palavra function do código."
                
            ],
            "Anotações Gerais":[
                "Criar uma classe, utilizando novos recursos JavaScript que favorecem a implementação do paradigma orientado a objeto.",
                "Uma classe possui um constructor com os quais definimos atributos - que chamamos de propriedades - e que podemos materializar uma abstração do mundo real usando um modelo, por meio de uma classe.",
                "Podemos passar parâmetros no construtor de uma classe e dessa forma, garantindo que no momento em que a instância de uma classe é criada, já tenha todos os dados necessários.",
                "Por convenção, adotamos que os atributos privados devem usar o prefixo _ (underline), indicando para o desenvolvedor que ele só pode acessá-lo.",                        
                "Um método que conseguimos acessar como uma propriedade, bastando ser antecedido pela palavra especial get, gera um 'getter', ou seja, quem acessa a sua classe acredita que se trata de uma propriedade, mas na verdade, trata-se por 'debaixo dos panos' de um método.",                        
                "O 'get, não é suficiente para garantir a integridade das propriedades de um objeto (que não pode ser alterada), por isso, usamos o Object.freeze() para congelar um objeto depois de criado.",
                "Como Object.freeze() é shallow (raso), ele será aplicado nas propriedades do objeto, mas as propriedades que são objetos não serão todas congeladas, a ação ficará apenas na superfície.",
                "Para resolver a questão do Object.freeze() ainda ser possivel alterar a propriedade do tipo objeto, podemos usar a programação defensiva, que é quando alguém tentar acessar a propriedade, retornaremos uma nova instância, e é interessate realizar isto no construtor também, pois com isso, evitamos que alguém consiga de fora da classe alterar algum item do estado interno.",
                "O modelo é uma das coisas mais importantes quando desenvolvemos o sistema.",
                "O ES2015 trouxe o template string, onde com o uso de ${} dentro da string, ele fará o mecanismo de interpolação, de forma que a expressão irá interpolar o conteúdo das variáveis nome e idade na string.",
                "A função reduce recebe dois parâmetros: uma função e um valor inicial ... na função interna ao reduce, o primeiro parâmetro é o valor da última iteração ( o que será retornado), e o segundo parâmetro é o valor da iteração atual (o valor corrente para trabalharmos durante a iteração).",
                "Em relação ao reduce: o segundo paramêtro (valor inicial) vale a pena ser informado, já que no caso de quando o array for vazio, evitamos lançamento de erro como: Reduce of empty array with no initial value",
                "Por padrão, quando uma classe herda outra, ela também herda seu construtor, ou seja, é passível de omissão o construtor da classe que busca a herança.",
                "Quando temos um construtor na classe filha que recebe uma quantidade de parâmetros diferentes do construtor da classe pai, para que o this seja inicializado com um valor, precisamos chamar o construtor da classe pai, passando os parâmetros que ela precisa.",
                "No mundo OO, essas classes que foram criadas para não ter instancias delas, são chamadas de classes abstratas."
            ]
            
        },
        "JS Aprofundando em MVC, Proxy e Factory":{
            "Escopo Léxico vs Dinâmico": [
                "O this de uma função é dinâmico, isto é, seu valor é determinado no momento em que a função é chamada. Como o this é dinâmico, é possível usar artifícios da linguagem, como a API Reflect, para alterá-lo se assim desejarmos.",
                "O this de uma arrow function é léxico, isto é, seu valor é determinado no local onde a arrow function for definida, ela não cria um novo this. O this de uma arrow function não pode ser alterado, mesmo se usarmos recursos da linguagem, como a API Reflect."
            ],
            "Reflect.apply": [
                "O primeiro parâmetro é o método ou função que desejamos invocar.",
                "O segundo parâmetro é o contexto que o método ou função adotará, ou seja, o valor que será assumido pelo this.",
                "Por fim, o último parâmetro é um array que contém todos os parâmetros que o método passado como primeiro parâmetro receberá, como ele não recebe parâmetro nenhum, passamos um array vazio."
            ],
            "Padrão Proxy":[
                "Existe um famoso padrão de projeto chamado Proxy, que de forma resumida, é 'um cara mentiroso'.",
                "Não é bom inserirmos armadilhas/modificações na classe, porque estaremos perdendo a reutilização do modelo e teremos que repetir em todos os modelos do sistema.",
                "O Proxy é idêntico ao objeto que queremos trabalhar, e teremos bastante dificuldade de diferenciá-los.",
                "Nós acessamos o Proxy como se ele fosse o objeto real, este último ficará escondido dentro do outro.",
                "Nós substituímos o objeto real, que só poderá ser acessado por meio do Proxy - que pode ou não ser executado em um código arbitrário se assim definirmos.",
                "O Proxy delegará a chamada do método para o objeto encapsulado por ele, e a vantagem está que podemos colocar as armadilhas/modificações entre a chamada do Proxy e o objeto real.",
                "Armadilhas/Modificações serão disparadas mesmo se tentarmos modificar uma propriedade congelada de um objeto, ainda que ele não seja modificado.",
                {
                    "Interceptação de Método":[
                        "Toda proxy criada, por padrão, não esta preparada para interceptar métodos (getters e setters são exceções a este problema).",
                        "Essa limitação ocorre porque sempre que um método de um objeto (que não deixa de ser uma propriedade que armazena uma função) é chamado, primeiro é realizado uma operação de leitura (get, do nosso handler da proxy) e depois os parâmetros são passados através de Reflect.apply.",
                        "O problema é que, como o método é interceptado pelo get do handler passado para a proxy, não temos acesso aos seus parâmetros."
                    ],
                    "Paramêtros Relevantes":{
                        "target": "é o objeto real que é encapsulado pela proxy. É este objeto que não queremos 'sujar' com armadilhas ou qualquer código que não diga respeito ao modelo.",
                        "prop": "é a propriedade em si, que está sendo lida naquele momento.",
                        "receiver": "é a referência ao próprio proxy. É na configuração do handler do Proxy que colocamos armadilhas.",
                        "arguments": "é uma variável implícita que pode ser acessada em métodos ou funções. Ele se comporta como um array onde cada posição equivale ao parâmetro que foi passado para o método ou função ... e ela existe desde o ES5!"
                    },
                    "Resumo":[
                        "O padrão de projeto Proxy nada mais é do que um objeto 'falso', 'mentiroso', que envolve e encapsula o objeto real que queremos interagir.",
                        "É como se fosse uma interface, entre o objeto real e o resto do código, na qual conseguimos assim controlar o acesso aos seus atributos e métodos.",
                        "Nele também podemos pendurar códigos que não cabem de estar alocados nos nossos modelos, mas que necessitam ser executados no caso de uma alteração ou atualização do mesmo."
                    ]
                }
            ],
            "Padrão Factory":[
                "O padrão de projeto chamado Factory consiste em uma classe ser especializada em criar determinado tipo de objeto.",
                "O padrão de projeto Factory é um dos padrões mais utilizados no desenvolvimento. Ele é mais um da categoria dos patterns responsáveis por criar objetos, como o Builder e o Prototype.",
                "O padrão de projeto Factory ocorre quando temos uma classe que nos ajuda a criar um objeto complexo, ou seja, ela esconde de nós os detalhes de criação desse objeto. É por isso que uma classe Factory possui apenas um método.",
                "É ideal quando queremos criar objetos similares, com apenas seus detalhes diferentes, que podemos passar nos argumentos da Factory.",
                "É bom para abstrair a criação de um objeto complexo, já que o programador que utilizar a Factory não precisa necessariamente saber como é feita esta operação.",
                "As fábricas não só fazem parte do nosso código, como também da API do JavaScript. Já existem várias classes que aproveitam esse padrão.",
                "Exemplo: a classe String possui um método (ou factory method) para transformar vários CharCode em uma string: let abc = String.fromCharCode(65, 66, 67); // 'ABC'",
                "Outro exemplo é a classe Array, que pode receber uma string ou um iterável, como lista ou mapas, para criar um array: let d = Array.from('abc'); // ['a', 'b', 'c']"
            ],
            "Padrão Promisse":[
                "Promises (promessas) agora fazem parte da linguagem JavaScript a partir do ES6.",
                "Elas representam o resultado futuro de uma ação, que pode ser de sucesso ou fracasso.",
                "Elas visam tornar códigos assíncronos mais legíveis e fáceis de manter, evitando o Callback Hell.",
                "Uma ou outra chamada assíncrona não é problemática, o problema é quando temos uma sucessão de chamadas assíncronas e o modo tradicional de lidar com elas, aninhando callbacks, torna o código difícil de ler e manter, principalmente o tratamento de erros.",
                "O construtor de Promise recebe uma função como parâmetro, e é essa função passada como parâmetro que será chamada internamente pela Promise, quando for criada.",
                "Como é a própria Promise que chama essa função, ela passa sempre dois parâmetros para ela nesta ordem: a função na qual passamos o valor de sucesso e a função que passamos o valor de fracasso.",
                "Usamos os métodos then e catch para capturar o resolve e o reject oriundo da promisse e dentro deles é necessário passar uma function ou Arrow function com o comando desejado.",
                "É por meio do método then, da instância de Promise que temos acesso ao resultado da ação.",
                "O método then recebe uma função e nela temos acesso sempre como primeiro parâmetro ao resultado da ação.",
                "Internamente em nossa Promise, é o valor passado para resolve que estará disponível para a função then."
            ],
            "Curiosidades":[
                "Uma requisição usando o XMLHttpRequest passa por estados, por isso o nome da propriedade em português é pronto para mudança de estado. Podemos passar uma função que verifica os estados e executará uma ação.",
                "O Error-first Callback, ou errorback, é um padrão que foi adotado no mundo Node.js. Como você já aprendeu, o callback é uma função chamada quando uma tarefa for executada, como uma requisição Ajax ou o acesso ao banco de dados. No entanto, a qualquer momento pode acontecer um erro no processamento e aí vem a questão de como lidar com isso.",
                "A convenção é que cada callback receba sempre o erro no primeiro parâmetro. Na função callback, basta então verificar esse parâmetro para saber se ocorreu um erro ou não!",
                "O paradigma orientado a objetos ajuda bastante a organizar o código, e, sendo JavaScript uma linguagem multiparadigma podemos lançar mão de outros paradigmas quando necessário, por exemplo, o funcional.",
                "É possível que todo o código escrito em ES6 funcione em navegadores que nem suportem a nova versão do JavaScript. Para isso é necessário o uso de um transpiler.",
                "Vale salientar que os grandes vilões de compatibilidade do código JavaScript são os browsers mobile. A solução com transpiler é uma solução que abarca também esses dispositivos.",
                {
                    "Transpiler":[
                        "Um transpiler é um compilador de código fonte para código fonte. Ou seja, em linguagens como C, compilamos o código fonte para um código binário para que esse rode em nosso sistema operacional.",
                        "Já um transpiler poderia converter o código escrito em C para JavaScript, ou seja, é um compilador que traduz o código fonte de uma linguagem para outra, no caso do JavaScript, o truque é compilar o código fonte (nossos arquivos JS) para JavaScript.",
                        "Faz sentido converter JS para JS porque no caso estaríamos convertendo um código em ES6 para ES5! Nesse contexto, o programador organiza seu código em ES6 para ajudar na manutenção e legibilidade, mas na hora que esse código for entrar em produção ele é todo convertido para ES5, ou seja, toda feature do ES6 é implementada (muitas vezes verbosamente) usando ES5! Com isso, qualquer navegador do mercado será capaz de compreender nosso código.",
                        "O mais importante nessa abordagem, é nunca editarmos os arquivos em ES5, editamos sempre os que estão em ES6 que a cada modificação devem ser convertidos para ES5.",
                        "A ideia é que no futuro o uso de transpilers não seja mais necessário. Contudo, continuar usando um transpiler permitirá o uso de recursos mais recentes da linguagem sem termos que esperar que sejam implementados pelos navegadores."
                    ]
                }
            ]
        }
    },
    "Ajax":[
        "Permite carregar apenas uma parte do conteúdo da página, fazendo com que o site do usuário fique mais leve , e por consequência mais rápido na hora de carregar.",
        "Conseguimos enviar dados para o servidor sem depender de um form do HTML.",
        "Cnseguimos trazer novos dados para o usuário sem que ele precise trocar de página.",
        "Conseguimos realizar requisições HTTP paralelamente ao nosso Javascript, sem interromper seu funcionamento, visto que estas requisições são assíncronas.",
        "Permite criar aplicações como Chat's e notificações, pois não precisamos recarregar a página para trocar dados.",
        "Conseguimos atualizar os dados da página com novas informações mesmo após o usuário já ter carregado a página.",
        "Para conseguirmos enviar dados via AJAX, com jQuery, sabemos que precisamos passar os dados como uma String ou um Objeto Javascript simples, como o segundo parâmetro da função $.get().",
        "O CORS significa CROSS ORIGIN RESOURCE SHARING ( compartilhamento de recurso entre diferentes origens) e é caracterizado por uma informação especial no header de resposta do servidor."
    ],
    "jQuery": {
        "Introdução": [
            "O jQuery é uma biblioteca, feita em JavaScript, que tem como objetivo facilitar a vida do desenvolvedor Web. O grande propósito dela é facilitar o uso do JavaScript nos websites, abstraindo da cabeça do desenvolvedor os problemas de compatibilidade entre os navegadores.",
            "Possui funções enxutas, que reduzem drasticamente a quantidade de código que o desenvolvedor tem que escrever, possuindo módulos que facilitam coisas como o AJAX , que é algo nativamente complexo de se fazer com JavaScript puro.",
            "O jQuery segue a máxima de seu lema, que é Write less, do more, focando em otimizar a experiência de desenvolver JavaScript para a Web. Este framework se tornou uma das mais famosas bibliotecas do desenvolvimento Web, com mais de 50% dos desenvolvedores utilizando-a em seu dia a dia.",
            "A primeira vantagem do jQuery é a compatibilidade que suas funções tem com os navegadores. Quando escrevemos código Javascript , temos de tomar cuidado com as diferentes implementações internas de cada navegador, o que pode fazer com que um código que é completamente funcional em um determinado navegador não seja em outro.",
            "A segunda grande vantagem do jQuery é a produtividade que ele trás para o desenvolvedor. Com suas funções conseguimos escrever um código muito mais sucinto , trazendo maior agilidade no desenvolvimento.",
            "A grande diferença da versão slim do jQuery é que esta não possuí nem as funções de animação nem as de AJAX do jQuery tradicional, deixando a framework mais leve.",
            "A versão de produção é minificada, já a de desenvolvimento vem em sua forma normal. Minificar é o processo de reduzir o tamanho de um arquivo fazendo certos processos como remover comentários, trocar nome de váriaveis por nomes menores, remover espaços, etc... A versão de produção, tem um tamanho reduzido, sendo incrívelmente 30% do peso da versão de desenvolvimento. ",
            "Para criarmos elementos do DOM com jQuery, devemos utilizar a própria função jQuery ($) , mas em vez de passarmos um id, classe, ou nome de um elemento para ela buscar, devemos passar uma tag HTML completa( com os sinais < e >)"
        ],
        "Funções":[
            "Para selecionarmos um elemento HTML com jQuery, utilizamos sua função seletora que tem o mesmo nome da framework, a função jQuery! Ela pode ser invocada de dois modos, o primeiro que é utilizando seu nome completo: jQuery(). Ou a mais comum que é utilizando o atalho conhecido para a função jQuery, o cifrão: $();",
            "Se queremos ter acesso ao contéudo textual de um elemento selecionado pelo jQuery, devemos utilizar a função .text(). Agora quando queremos alterar o texto de um elemento, também utilizamos a função .text(), porém passando o valor do novo texto como parâmetro para ela.",
            "A função on() do jQuery, recebe como parâmetro dois argumentos: O primeiro sendo uma string com o nome do evento que ela vai passar a escutar e o segundo uma função, com a ação que ela deve executar quando o evento acontecer.",
            "As funções .val() e .text() podem manipular os valores de texto dos elementos, mas a .val() funciona em elementos de <input> que são campos aonde o usuário do site insere dados , como os campos de <input>(todos os tipos), <textarea> e <select>. Já a função .text() pega o conteúdo de texto de tags HTML que tem texto dentro, como as <h1>, <span> e <p>",
            "A função .one() funciona de modo semelhante a função .on(), ambas podem ser utilizadas em qualquer elemento, recebem qualquer evento e uma função anônima ou uma função nomeada ... a diferença entre elas é na hora de escutar os eventos, a função .one() escuta o evento apenas uma única vez, diferentemente da função on(), que fica escutando o evento em um elemento do HTML por tempo ilimitado.",
            "Os eventos mais comuns do jQuery possuem funções de atalho ( shorthand functions ), por exemplo as funções .focus, .change, .dblclick ... etc. Todos eles equivalem a chamada da função on() passando-os como parâmetro. As funções de atalho, assim como a função on devem receber uma função como parâmetro, que indica qual ação elas devem executar ao ouvirem o evento.",
            "A função css recebe o nome da propriedade e devolve o valor: var cor = $('div').css('background-color');. Também é possivel recuperar mais de um valor passando um array de propriedades, por exemplo: var valores = $('div').css(['background-color','width']);. O resultado é um objeto que possui todos os valores. Por exemplo para acessar o width podemos escrever: valores.width",
            "A função .css() também pode ser usada para adicionar novas propriedades. No entanto isso não é considerado boa prática e deve ser evitado, pois para facilitar a manutenção devemos declarar as propriedades dentro de um arquivo CSS.",
            "A função que adiciona um novo elemento como último filho é a append. Ela recebe um elemento HTML ou uma string e adiciona-o como um filho, depois dos filhos que ele já possuía. Já o comando que adiciona um novo elemento como primeiro filho é o prepend(). Ele recebe um elemento HTML ou uma string e adiciona-o como um filho, antes dos filhos que ele já possuía.",
            "A função .parent() tem como objetivo navegar pela árvore de elementos do HTML. Ela por padrão retorna o pai do elemento em que foi chamada. Como curiosidade , a função .parent() também pode receber um seletor como argumento. Deste modo, ela irá procurar nos pais do elemento por alguém com o seletor especificado.",
            "A função .remove() , serve pare remover um elemento do HTML, como o próprio nome indica. Tome cuidado ao usá-la , pois o elemento é realmente removido e não apenas escondido, que é o caso quando usamos a função .hide().",
            "A função toggle é um atalho para as funções hide e show. Quando ela é chamada para um elemento visível, o elemento fica invisível. Quando é chamada para um elemento invisível, ela torna o elemento visível.",
            "A função is que permite consultar uma pseudo class. Toda vez que um elemento esta com display diferente de none ele ganha a pseudo classe :visible . A função is retorna true caso o elemento esteja visível. Se ele estiver visível, precisamos escondê-lo e isso é feito através da função hide. Para exibir o elemento, é usada a função show.",
            "A função slideDown aceita recebe como parâmetro um tempo em milissegundos. Neste exemplo, a transição demorará dois segundos para ser concluída.",
            "A função .stop() serve para interromper uma animação antes de começar a próxima.",
            ""
        ]
    }
}