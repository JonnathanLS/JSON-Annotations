{
    "Indefinidos": [
        "O valor da propriedade display referente ao flexbox é flex.",
        "A propriedade align-items faz com que os elementos dentro do pai que está com flex se alinhem verticalmente, portanto, pra eles ficarem alinhados no centro podemos usar align-items: center, colocando essa propriedade no pai dos elementos que queremos alinhar.",
        "Podemos colocar flex-direction: column no pai, dessa forma ele muda o fluxo o qual o flexbox renderiza os elementos, assim eles ficam um em baixo do outro."
    ],
    "Diferenças de Posicionamento":{
        "display: inline": "display: inline nos elementos permite eles se posicionarem um do lado do outro, o problema do display: inline é que os elementos não aceitam mais que seja modificada tanto a width quanto a height. Isso limita MUITO nossas possibilidades.",
        "display: inline-block": [
            "display: inline-block permite os elementos se posicionarem um do lado do outro porém, diferentemente do display: inline ele permite que os elementos tenham sua width e height modificadas. Por esse motivo o display: inline-block é muito mais interessante na maioria dos casos do que o display: inline.",
            "O problema de usar display: inline-block é espaçar os elementos entre si. Para fazer isso teríamos que colocar margins e fazer contas."
        ],
        "float: left | right": "o float é mais complicado, ele empurra o elemento para um dos lados (left | right) e os elementos que estão embaixo sobem. Isso nem sempre é o que a gente quer. Além do mais o float não permite que usemos a propriedade vertical-align: middle para alinhar os elementos verticalmente. Ou seja, para contornar isso uma possibilidade seria ter que colocar margin-top ou bottom nos elementos e usar os temidos números mágicos!",
        "display: flex": [
            "O display: flex veio com o intuito de facilitar nossa vida nos aspectos de posicionamento.",
            "Ele permite os elementos ficarem um do lado do outro, permite espaçar os elementos de forma mais intuitiva e sem ter que fazer cálculos, além disso ele também permite alinhar os elementos verticalmente de forma fácil.",
            "O display flex pode ser um pouco mais complicado de usar tendo em vista que existem diversas propriedades que vem junto da especificação flexible box, todavia tudo isso foi feito para justamente melhorar nosso código."
        ]
    },
    "Distribuição de Elementos":[
        "Podemos distribuir os elementos dentro do pai de diversas formas, podemos por exemplo:",
        "Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.",
        "Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).",
        "Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.",
        "Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.",
        "E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos - podemos usar o justify-content: space-around para isso.",
        "Podemos colocar flex-direction: column no pai, dessa forma ele muda o fluxo o qual o flexbox renderiza os elementos - assim eles ficam um em baixo do outro.",
        "Para o flex não transbordar um conteúdo, de forma que quando o conteúdo ultrapassar o tamanho do pai ou da página, e que ele simplesmente quebre para uma próxima coluna ou linha, usamos flex-wrap: wrap.",
        "As vezes pode ser complicado utilizar justify-content: space-between ou space-around para o grid: Tanto space-between quanto space-around deixariam super estranha a última linha do grid caso essa tivesse menos elementos do que o total de elementos por linha."
    ]
}