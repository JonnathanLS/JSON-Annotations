{
	"Conceito": "O Webpack trata-se de module bundler que 'empacota' módulos para carregá-los na aplicação. Ele é voltado para a criação de single pages application (SPA), comumente utilizado pelo Angular CLI, Vue CLI e Create React App.",
	"Introdução":[
		"Para utilizarmos Webpack em ambiente de desenvolvimento é necessário ter a plataforma Node.js instalada. O Node.js é um ambiente JavaScript multiplataforma disponível para Linux, Mac e Windows.",
		"O babel-core nada mais é do que o núcleo do babel desprovido de sua linha de comando e que pode ser utilizado por outras ferramentas do mercado como Webpack.",
		"Webpack dispensa a utilização de um module loader, justamente por criar em bundles em tempo de desenvolvimento, que nada mais são do que scripts que agregam outros módulos da aplicação.",
		"É preciso utilizar um loader para poder lidar com arquivos que não conseguem ser processados diretamente pelo webpack."
	],
	"Relação Estrita com SPA":[
		"Apesar de o Webpack ser altamente customizavel, sua aplicação é voltada para Single Page Applications, essa aplicação se comporta como se fosse uma aplicação nativa, pelo não carregamento durante o uso.",
		"As SPAs não recarregam a página durante seu uso e tendem a carregar todos os scripts e arquivos CSS que dependem logo no primeiro carregamento, onde toda mudança de troca de página é feita por um sistema de rotas que manipula a única página carregada trocando seu conteúdo.",
		"Por mais fabulosa que a abordagem SPA possa ser para o usuário, se o escopo da aplicação for grande, o primeiro carregamento será sofrível, primeiro pelo tempo de download de arquivos JS e CSS gigantes (concatenados e minificados) além do tempo para que o interpretador JavaScript realize o parser desses arquivos.",
		"Esse problema já não acontece com aplicações web tradicionais, pois cada página carrega os scripts e arquivos CSS de que precisam, e o Webpack soluciona esse problema das Single Page Applications.",
		"Webpack permite dividir um bundle da aplicação em outros bundles menores que são carregados apenas quando forem utilizados pela aplicação, diminuindo assim o tempo de carregamento dessas aplicações e por conseguinte melhorando a experiência do usuário."
	],
	"Arquivo de Configuração":[
		"É comum utilizar um npm script para executar o webpack bastando adicioná-lo no arquivo package.json, sem esse script seríamos obrigados a executar o caminho completo do webpack, algo bem improdutivo e sujeito a erros.",
		"O arquivo de configuração do webpack nada mais é do que um módulo do Node.js, lembre-se que é a plataforma Node.js que executa o Webpack para nós, aliás, o sistema de módulos da plataforma utilizado pela plataforma é o CommonJS. Diferente do ESM módulos, o CommonJS utiliza a sintaxe require e module.exports."
	],
	"Preparando o Build de Produção":[
		"O build de produção, consiste em minificar o bundle.js final.",
		"Ao inserimos o parâmetro de -p no script, internamente será usado o uglify, a qual não precisaremos baixar por ser uma dependência do Webpack.",
		"O Uglify é um módulo famoso, bastante utilizado para minificar arquivos JavaScript, porém para build de produção o Uglify não suporta a sintaxe do ES2015, assim como as versões seguintes.",
		"Com o Uglify, não conseguiremos minificar os arquivos escritos com o ES mais modernos e para contornar isso, podemos pedir para o webpack usar outro módulo na realização desse processo de minificação e suporte a sintaxe do ES2015 (além de versões posteriores), os módulos, por exemplo: o Babili",
		"Para garantirmos que a mudança da variável de ambiente funcionará em qualquer plataforma, podemos pedir ao webpack a ajuda de um módulo do NodeJS, por exemplo: o cross-env, a qual nos permite setar as variáveis de ambiente cross platform. "
	],
	"Ambiente de Desenvolvimento":[
		"Quando trabalharmos em ambiente de desenvolvimento, podemos usar um servidor que se integre com o Webpack, desta forma, não precisamos criar um servidor próprio para tornar acessível o projeto, e o webpack-dev-server faz muito bem esse papel.",
		"Webpack Dev Server é um servidor capaz de ler as configurações de webpack.config.js ao ser carregado, ele se encarregará de tornar o projeto acessível através do navegador e aplicará todas as regras definidas em webpack.config.js.",
		"Webpack Dev server é baixado através do npm, pois é nada mais nada menos do que um módulo do Node.js, inclusive o Webpack e seus plugins são módulos do Node.js.",
		"Webpack Dev Server oferece a funcionalidade de live reloading, inclusive reconstruindo os bundles da aplicação e recarregando-os automaticamente a cada mudança realizada."
	],
	"Propriedades":[
		"A propriedade publicPath, localizada no objeto de configuração da propriedade output, é importante para alterar o caminho gerado pelo webpack dev server. Com essa modificação, o bundle será acessível através de dist/bundle.js."
	],
	"Gerenciamento de Dependências Frontend":[
		"Podemos usar o npm da própria plataforma Node.js para gerenciar as dependências de frontend da nossa aplicação. Nesse sentido, Webpack será o responsável pelo carregamento dessas dependências adicionando-as no bundle da aplicação.",
		"Quem gerencia as dependências é o npm, o Webpack apenas permitirá adicioná-las ao bundle da aplicação tratando-os como módulos, contanto que haja um loader configurado para lidar com o tipo de arquivo em questão.",
		"O Webpack, para carregar CSS's de dependências frontend baixadas pelo npm, precisará tratá-los como módulos para então, no processo de build do Webpack, adicioná-lo no bundle.js da aplicação."
	],
	"CSS e o FOUC":[
		"FOUC significa flash of unstyled content. É quando há um hiato entre o carregamento do CSS e sua aplicação na página, permitindo que o usuário veja a página sem estar estilizada durante um breve tempo.",
		"Por padrão o Webpack NÃO É capaz de separar os CSS importados como módulos através de seus loaders em um arquivo CSS em separado, sendo necessário o uso do módulo extract-text-webpack-plugin para esta tarefa.",
		"Por mais que o webpack adicione arquivos CSS importados no bundle da aplicação, é interessante adicioná-los em um arquivo CSS separado para podermos usufruir de todas as otimizações realizadas pelos navegadores a respeito do carregamento de folhas de estilo."
	],
	"Importação de Scripts":[
		"O padrão é todos fazerem parte de um mesmo bundle, isto é, aquele que possui todo o código da aplicação.",
		"Podemos importar scripts diretamente da pasta node_modules através da instrução import.",
		"Não é necessário instalar nenhum loader, pois a importação de scripts é padrão no webpack seguindo as mesmas regras de diretório da importação de css."
	],
	"Configurações HtmlWebpackPlugin":{
		"hash": "Quando true, adiciona um hash no final da URL dos arquivos script e CSS importados no arquivo HTML gerado, importante para versionamento e cache no navegador. Quando um bundle diferente for gerado, o hash será diferente e isso é suficiente para invalidar o cache do navegador, fazendo-o carregar o arquivo mais novo.",
		"minify": "Recebe um objeto como parâmetro com as configurações utilizadas para minificar o HTML. Podemos consultar todas as configurações possíveis no endereço https://github.com/kangax/html-minifier#options-quick-reference.",
		"filename": "O nome do arquivo HTML que será gerado. Respeitará o valor do path de output que já configuramos logo no início da criação do arquivo webpack.config.js.",
		"template": "Caminho do arquivo que servirá como template para geração de index.html."
	},
	"Disponibilidade de Artefatos":[
		"Precisamos utilizar o operador new quando formos utilizar o webpack.ProvidePlugin, sua omissão resultará em um erro durante o build do projeto.",
		"Webpack já vem com o ProvidePlugin que resolve a questão da disponibilidade de artefatos para outros módulos sem que haja a importação desses artefatos.",
		"Um caso clássico é a dependência do jQuery pelo script do Bootstrap, o script do Bootstrap não o importa com a instrução import (até porque ele não foi criado por nós), mas o procura no escopo global.",
		"Por mais que tentemos importar o jQuery com a instrução import antes do script do Bootstrap, o jQuery estará isolado em uma closure por ter sido tratado como um módulo e isso não permitirá que ele seja acessível por outros script que dependem dele."
	],
	"Boas Práticas":{
		"Scope Hoisting":[
			"Cada módulo do nosso bundle é envolvido por um wrapper, que resumidamente se trata de uma função, contudo, a existência desses wrappers tornam a execução do script um pouco mais lenta no navegador.",
			"Entretanto, a partir do Webpack 3, podemos ativar o Scope Hoisting, ele consiste em concatenar o escopo de todos os módulos em um único wrapper, permitindo assim que nosso código seja executado mais rapidamente no navegador."
		],
		"Vendor":[
			"A separação do código da aplicação e das bibliotecas de terceiro é uma ótima prática, e pode ser configurada através do webpack.config.js adicionando o plugin CommonsChunkPlugin e alterando o entry para que leve em consideração dois pontos de entrada da aplicação."
		],
		"Code Spliting e Lazy Loading": [
			"Um estratégia utilizada para a resolução de problemas como bundles grandes é o code splitting (separação de código) e o lazy loading (carregamento preguiçoso).",
			"Em aplicação como AngularJS ou VueJS, em seus sistemas de rotas, podemos informar que queremos carregar um módulo no momento em que for necessário, a aplicação não será carregada com esse módulo, ele ficará em back-end separado, e quando acessarmos o módulo pela primeira vez, ele será carregado pelo framework uma única vez.",
			"Se queremos fazer um carregamento sob demanda (lazy loading), devemos ter a aplicação divida em partes menores, com isso, o Webpack saberá que no momento da criação dos bundles, será gerado um arquivo bundle para a aplicação e outro separado destinado ao módulo carregado sob demanda.",
			"Basta usarmos System.import para carregarmos dinamicamente módulos em nosso aplicação no lugar da instrução import. O módulo não deve ser importado estaticamente em nenhum outro ponto da aplicação.",
			"É importante que o módulo carregado sob demanda não esteja estaticamente importado em nenhum outro ponto da aplicação, caso contrário ele fará parte do bundle.",
			"Podemos usar System.import ou import, a última forma é que se tornará vigente e que se coaduna com a spec import do ECMASCRIPT."
		],
		"API de Desenvolvimento e de Produção": [
			"Podemos realizar a alternância de endpoints com base no build de desenvolvimento ou produção através de re-atribuição de variável e com o plugin DefinePlugin() que recebe como parâmetro um objeto JS e os valores que varreremos os nosso módulos e trocar.",
			"Sempre que for encontrado a variável definida nos módulos deverá ser trocado pelo valor de reatribuição dela com base no ambiente de distribuição."
		]
	}
}